<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SmileLJZ 个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://smileljz.github.io/"/>
  <updated>2020-07-21T00:03:04.223Z</updated>
  <id>https://smileljz.github.io/</id>
  
  <author>
    <name>SmileLJZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript相关知识</title>
    <link href="https://smileljz.github.io/2020/07/21/javascript%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>https://smileljz.github.io/2020/07/21/javascript%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</id>
    <published>2020-07-20T22:39:11.000Z</published>
    <updated>2020-07-21T00:03:04.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面对对象（OOP）"><a href="#面对对象（OOP）" class="headerlink" title="面对对象（OOP）"></a>面对对象（OOP）</h1><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>面对对象是大家都很熟悉的程序设计思想，是对真实世界的抽象，目前主要OOP语言用来实现面对对象的基础是类，通过类的封装，继承来映射真实世界。包括Java，C#，甚至是python等都通过类的设计来实现面对对象。但是细想起来也会觉得有问题，因为真实世界其实没有类这种概念，只有一个个不同的对象，真实世界中，继承关系发生在对象和对象之间，而不是类。就比如孩子是对象，父母也是对象，孩子（对象）继承自父母（对象）<br>JS也是面对对象的编程语言，只不过它实现面对对象的思路是基于原型（prototype）,而不是类。这种思路也叫对象关联（Object Link Other Object），即在对象上直接映射那种真实世界的关系（如继承）。</p><h2 id="原型概念"><a href="#原型概念" class="headerlink" title="原型概念"></a>原型概念</h2><p>JS中一切皆对象，而每个对象都有一个原型（Object除外），这个原型，大概就像Java中的父类，所以，基本上你可以认为原型就是这个对象的父对象，即每一个对象（Object除外）内部都保存了它自己的父对象，这个父对象就是原型。一般创建的对象如果没有特别指定原型，那么它的原型就是Object(这就很类似Java中所有的类默认继承自Object类)。</p><h2 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h2><p>在JS中，对象创建的方法有很多种，最常见的如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种，手动创建</span></span><br><span class="line"><span class="keyword">var</span> a=&#123;<span class="string">'name'</span>:<span class="string">'lala'</span>&#125;;   </span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种，构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">'lala'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种，class (ES6标准写法)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="comment">//super();此处没有使用extends显式继承，不可使用super()</span></span><br><span class="line">        <span class="keyword">this</span>.name=<span class="string">'lala'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> A()</span><br><span class="line"><span class="comment">//其实后面两种方法本质上是一种写法</span></span><br></pre></td></tr></table></figure><p>这三种写法创建的对象的原型（父对象）都是Object,需要提到的是，ES6通过引入class ,extends等关键字，以一种语法糖的形式把构造函数包装成类的概念，更便于大家理解。是希望开发者不再花精力去关注原型以及原型链，也充分说明原型的设计意图和类是一样的。</p><h2 id="查看对象原型"><a href="#查看对象原型" class="headerlink" title="查看对象原型"></a>查看对象原型</h2><p>当对象被创建之后，查看它们的原型的方法不止一种，以前一般使用对象的proto属性，ES6推出后，推荐用Object.getPrototypeOf()方法来获取对象的原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">'lala'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(A.prototype)  </span><br><span class="line"><span class="comment">//输出：Object &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(A.__proto__)  </span><br><span class="line"><span class="comment">//输出：function () &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(A))</span><br><span class="line"><span class="comment">//输出：function () &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>无论对象是如何创建的，默认原型都是Object，在这里需要提及的比较特殊的一点就是，通过构造函数来创建对象，函数A本身也是一个对象，而A有两个指向表示原型的属性，分别是proto和prototype，而且两个属性并不相同</p><p>函数的的prototype属性只有在当作构造函数创建的时候，把自身的prototype属性值赋给对象的原型。而实际上，作为函数本身，它的原型应该是function对象，然后function对象的原型才是Object。<br>总之，建议使用ES6推荐的查看原型和设置原型的方法。</p><h2 id="原型的用法"><a href="#原型的用法" class="headerlink" title="原型的用法"></a>原型的用法</h2><p>其实原型和类的继承的用法是一致的：当你想用某个对象的属性时，将当前对象的原型指向该对象，你就拥有了该对象的使用权了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">'world '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bb=<span class="string">"hello"</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(a,b);</span><br><span class="line"><span class="comment">//将b设置为a的原型,此处有一个问题，即a的constructor也指向了B构造函数，可能需要纠正</span></span><br><span class="line">a.constructor=A;</span><br><span class="line"><span class="built_in">console</span>.log(a.bb)</span><br><span class="line"><span class="comment">//输出 hello</span></span><br></pre></td></tr></table></figure><p>如果使用ES6来做的话则简单许多，甚至不涉及到prototype这个属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">     <span class="keyword">constructor</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.bb=<span class="string">'hello'</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>  <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">     <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.name=<span class="string">'world'</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(a.bb+<span class="string">" "</span>+a.name);</span><br><span class="line"><span class="comment">//输出hello world</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(A))</span><br><span class="line"><span class="comment">//输出  "function"</span></span><br></pre></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>这个概念其实也变得比较简单，可以类比类的继承链条，即每个对象的原型往上追溯，一直到Object为止，这组成了一个链条，将其中的对象串联起来，当查找当前对象的属性时，如果没找到，就会沿着这个链条去查找，一直到Object，如果还没发现，就会报undefined。那么也就意味着你的原型链不能太长，否则会出现效率问题。</p><h2 id><a href="#" class="headerlink" title></a></h2><ul><li>对于原型概念的理解<ul><li>类比类的继承，对象的原型可以理解为对象的父对象</li></ul></li></ul><ul><li>原型的运用<ul><li>尽可能使用ES6的标准，使用class，extends,Object.getPrototype(),Object.setPrototype()等等</li></ul></li></ul><ul><li>需要注意的点<ul><li>原型继承链条不要太长</li><li>指定原型时，注意constructor也会改变。</li></ul></li></ul><hr><h1 id="Javascript-的作用域和作用域链"><a href="#Javascript-的作用域和作用域链" class="headerlink" title="Javascript 的作用域和作用域链"></a>Javascript 的作用域和作用域链</h1><p>作用域： 作用域是定义变量的区域，它有一套访问变量的规则，这套规则来管理浏览器引擎如何在当前作用域以及嵌套的作用域中根据变量（标识符）进行变量查找。<br>作用域链： 作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和<br>函数。<br>作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前<br>端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。<br>当我们查找一个变量时，如果当前执行环境中没有找到，我们可以沿着作用域链向后查找。</p><h2 id="什么是作用域"><a href="#什么是作用域" class="headerlink" title="什么是作用域"></a>什么是作用域</h2><p>先看这段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Jake Zhang'</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(name); </span><br><span class="line">&#125;</span><br><span class="line">fun();<span class="comment">// 输出"Jake Zhang"</span></span><br></pre></td></tr></table></figure><p>在fun() 执行的时候，输出一个name变量 ，那么这个name变量是哪里来？有看到函数第一行有 定义 name变量的代码var name = ‘Jake Zhang’</p><p>继续看另外一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name2 = <span class="string">'Jake Zhang2'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(name2);</span><br><span class="line">&#125;</span><br><span class="line">fun(); <span class="comment">// 输出"Jake Zhang2"</span></span><br></pre></td></tr></table></figure><p>同样，在输出 name2 时，自己函数内部没有找到变量name2 ，那么就 在外层的全局中查找 ，找到了就停止查找并输出结果。</p><p>可以注意到以上两段代码都有查找变量。第一段代码是在函数fun中找到name变量，第二段代码是在全局中找到name2变量。 现在给加粗的这两个词的后面加上作用域三个字，再读一遍：第一段代码是在函数作用域fun中找到name变量，第二段代码是在全局作用域中找到name2变量。</p><p>其实我们可以发现，作用域，本质是一套规则，用于确定在何处以及如何查找变量（标识符）的规则。关键点在于：查找变量（或标识符）。</p><p>由此我们便可引出</p><h3 id="（1）作用域的定义："><a href="#（1）作用域的定义：" class="headerlink" title="（1）作用域的定义："></a>（1）作用域的定义：</h3><p>作用域是定义变量的区域，它有一套访问变量的规则，这套规则用来管理浏览器引擎如何在当前作用域以及嵌套的作用域中根据变量（标识符）进行变量查找。</p><h3 id="（2）词法作用域"><a href="#（2）词法作用域" class="headerlink" title="（2）词法作用域"></a>（2）词法作用域</h3><p>在上面的作用域介绍中，我们将作用域定义为一套规则，这套规则来管理浏览器引擎如何在当前作用域以及嵌套的作用域中根据变量（标识符）进行变量查找。</p><p>现在我们提出一个概念：“词法作用域是作用域的一种工作模型”，作用域有两种工作模型，在JavaScript中的词法作用域（静态作用域）是比较主流的一种，另一种动态作用域（是不关心函数和变量是如何声明以及在何处声明的，只关心它们从何处调用）。<br>所谓的词法作用域就是在你写代码时将变量和块作用域写在哪里来决定，也就是词法作用域是静态的作用域，在你书写代码时就确定了。</p><p>请看以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> y = x + <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">z</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x, y, z);</span><br><span class="line">&#125;</span><br><span class="line">fn2(y * <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="number">6</span>); <span class="comment">// 6 10 50</span></span><br></pre></td></tr></table></figure><p>复制代码这个例子中有个三个嵌套的作用域，如图：<br><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/4/13/17172d279d13922c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><ul><li>A 为全局作用域，有一个标识符：fn1</li><li>B 为fn1所创建的作用域，有三个标识符：x、y、fn2</li><li>C为fn2所创建的作用域，有一个标识符：z<br>作用域是由其代码写在哪里决定的，并且是逐级包含的。</li></ul><h3 id="（3）块级作用域"><a href="#（3）块级作用域" class="headerlink" title="（3）块级作用域"></a>（3）块级作用域</h3><p>在ES6之前JavaScript并没有块级作用域的概念，我们来看一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.i)</span><br><span class="line">    </span><br><span class="line">&#125; <span class="comment">//0 1 2 3 4</span></span><br></pre></td></tr></table></figure><p>如果你没在函数内使用<code>for</code>循环的话，你会惊奇的发现，妈耶，我这个<code>var</code>不等于白<code>var</code>嘛，反正都是全局变量，要知道我们的变量只能从下往上查找，不能反过来。所以<code>JavaScript</code>并没有块级作用域的概念。<br>块级作用域是ES6中新添加的概念，常指的是{}中的语句，如 <code>if</code> 和 <code>switch</code> 条件语句或 <code>for</code>和 <code>while</code> 循环语句，不像函数，它们不会创建一个新的作用域。块级作用域通常通过<code>let</code>或<code>const</code>来体现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)(<span class="built_in">console</span>.log(<span class="built_in">window</span>.j));<span class="comment">//undefined *5</span></span><br></pre></td></tr></table></figure><p>看上面的代码，可以和上一个的<code>var i</code>的循环做对比。其实，提到let，const，这里还涉及到变量提升、暂时性死区等知识点。</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>我们回到刚开始讲作用域的那段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name2 = <span class="string">'Jake Zhang2'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(name2);</span><br><span class="line">&#125;</span><br><span class="line">fun(); <span class="comment">// 输出"Jake Zhang2"</span></span><br></pre></td></tr></table></figure><p>我们在查找 name2 变量时，先在函数作用域中 查找，没有找到，再去 全局作用域中 查找。你会注意到，这是一个往外层查找的过程，即顺着一条链条 从下往上查找变量 。这条链条，我们就称之为作用域链。<br>这样我们就得出作用域链的概念：在作用域的多层嵌套中查找自由变量的过程是作用域链的访问机制。而层层嵌套的作用域，通过访问自由变量形成的关系叫做作用域链。</p><p>来两张图帮助理解：</p><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/4/13/171732353113a982?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/4/13/171733125b9957c5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><hr><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>前面所说的作用域及词法作用域都是为讲闭包做准备，词法作用域也是理解闭包的前置知识，所以如果对 作用域还有点模糊的可以回头再看一遍。</p><h2 id="（1）从实例解析闭包"><a href="#（1）从实例解析闭包" class="headerlink" title="（1）从实例解析闭包"></a>（1）从实例解析闭包</h2><p>闭包（closure），是基于词法作用域书写代码时产生的一种现象。各种专业文献的闭包定义都非常抽象，我的理解是:** 闭包就是能够读取其他函数内部变量的函数**。通过下面的实践你会知道，闭包在代码中随处可见，不用特意为其创建而创建，随着深入做项目后，打代码的不经意间就已经用了闭包。</p><p><strong>实例1：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       n++;</span><br><span class="line">       <span class="built_in">console</span>.log(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a1 = a(); <span class="comment">//注意，函数名只是一个标识（指向函数的指针），而（）才是执行函数；</span></span><br><span class="line">a1();    <span class="comment">//1</span></span><br><span class="line">a1();    <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>分析如下：</p><ul><li>add的词法作用域能访问a的作用域。根据条件执行a函数内的代码，add当做值返回；</li><li>add执行后，将a的引用赋值给a1；</li><li>执行a1，分别输出1，2</li></ul><p>通过引用的关系，<code>a1</code>就是<code>a</code>函数本身（<code>a1=a</code>）。执行<code>a1</code>能正常输出变量<code>n</code>的值，这不就是“<code>a</code>能记住并访问它所在的词法作用域”，而<code>a</code>（被<code>a1</code>调用）的运行是在当前词法作用域之外。</p><p>当<code>add</code>函数执行完毕之后，其作用域是会被销毁的，然后垃圾回收器 会释放闭包那段内存空间，但是闭包就这样神奇地将<code>add</code>的作用域存活了下来，<code>a</code>依然持有该作用域的引用。</p><p>为什么会这样呢？原因就在于<code>a</code>是<code>add</code>的父函数，而<code>add</code>被赋给了一个全局变量，这导致<code>add</code>始终在内存中，而<code>add</code>的存在依赖于a，因此a也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。<br>所以，在本质上，闭包是将函数内部和函数外部连接起来的桥梁。<br><strong>总结：闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。</strong></p><h2 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h2><p>闭包可以用在许多地方。它的最大用处有两个，<strong>一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中</strong>。</p><h2 id="闭包的实际应用"><a href="#闭包的实际应用" class="headerlink" title="闭包的实际应用"></a>闭包的实际应用</h2><p>使用闭包，我们可以做很多事情。比如模拟面向对象的代码风格；更优雅，更简洁的表达出代码；在某些方面提升代码的执行效率。</p><p><strong>实例2：随处可见的定时器</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitSomeTime</span>(<span class="params">msg, time</span>) </span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;, time);</span><br><span class="line">&#125;</span><br><span class="line">waitSomeTime(<span class="string">'hello'</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>定时器中有一个匿名函数，该匿名函数就有涵盖waitSomeTime函数作用域的闭包，因此当1秒之后，该匿名函数能输出msg。</p><p><strong>实例3：用for循环输出函数值的问题</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  fnArr[i] =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( fnArr[<span class="number">3</span>]() ) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>通过<code>for</code>循环，预期的结果我们是会输出0-9，但最后执行的结果，在控制台上显示则是全局作用域下的10个10。<br>这是因为当我们执行<code>fnArr[3]</code>时，先从它当前作用域中找 <code>i</code> 的变量，没找到<code>i</code> 变量，从全局作用域下找。开始了从上到下的代码执行，要执行匿名函数<code>function</code>时，<code>for</code>循环已经结束（<code>for</code>循环结束的条件是当<code>i</code>大于或等于10时，就结束循环），然后执行函数<code>function</code>，此时当 <code>i</code> 等于<code>[0,1,2,3,4,5,6,7,8,9]</code>时，此时i 再执行函数代码，输出值都是 <code>i</code> 循环结束时的最终值为：10，所以是输出10次10。<br>由此可知：<code>i</code>是声明在全局作用域中，<code>function</code>匿名函数也是执行在全局作用域中，那当然是每次都输出10了。</p>]]></content>
    
    <summary type="html">
    
      CSS 用于控制网页的样式和布局。
    
    </summary>
    
    
      <category term="面试" scheme="https://SmileLJZ.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="javascript" scheme="https://SmileLJZ.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>css相关知识</title>
    <link href="https://smileljz.github.io/2020/07/20/css%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>https://smileljz.github.io/2020/07/20/css%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</id>
    <published>2020-07-20T11:23:59.000Z</published>
    <updated>2020-07-20T11:41:21.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍下-BFC-及其应用"><a href="#介绍下-BFC-及其应用" class="headerlink" title="介绍下 BFC 及其应用"></a>介绍下 BFC 及其应用</h1><p><strong>块格式化上下文（Block Formatting Context，BFC）</strong> 是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p><p>下列方式会创建<strong>块格式化上下文</strong>：</p><ul><li>根元素（<code>&lt;html&gt;</code>）</li><li>浮动元素（元素的 <code>float</code> 不是 <code>none</code>）</li><li>绝对定位元素（元素的 <code>position</code> 为 <code>absolute</code> 或 <code>fixed</code>）</li><li>行内块元素（元素的 <code>display</code>为 <code>inline-block</code>）</li><li>表格单元格（元素的 <code>display</code> 为 <code>table-cell</code>，HTML表格单元格默认为该值）</li><li>表格标题（元素的 <code>display</code> 为 <code>table-caption</code>，HTML表格标题默认为该值）</li><li>匿名表格单元格元素（元素的 <code>display</code> 为 <code>table</code>、<code>table-row</code>、 <code>table-row-group</code>、<code>table-header-group</code>、<code>table-footer-group</code>（分别是HTML table、row、tbody、thead、tfoot 的默认属性）或 <code>inline-table</code>）</li><li><code>overflow</code> 值不为 <code>visible</code> 的块元素</li><li><code>display</code> 值为 <code>flow-root</code> 的元素</li><li><code>contain</code> 值为 <code>layout</code>、<code>content</code> 或 <code>paint</code> 的元素</li><li>弹性元素（<code>display</code> 为 <code>flex</code> 或 inline-flex 元素的直接子元素）</li><li>网格元素（<code>display</code> 为 <code>grid</code> 或 <code>inline-grid</code> 元素的直接子元素）</li><li>多列容器（元素的 <code>column-count</code> 或 <code>column-width</code> 不为 <code>auto</code>，包括 <code>column-count</code> 为 <code>1</code>）</li><li><code>column-span</code> 为 <code>all</code> 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。<br>块格式化上下文包含创建它的元素内部的所有内容.</li></ul><p>块格式化上下文对浮动定位（参见 <code>float</code>）与清除浮动（参见 <code>clear</code>）都很重要。浮动定位和清除浮动时只会应用于同一个BFC内的元素。浮动不会影响其它BFC中元素的布局，而清除浮动只能清除同一BFC中在它前面的元素的浮动。外边距折叠（<code>Margin collapsing</code>）也只会发生在属于同一BFC的块级元素之间。</p><p>BFC特性：</p><ul><li>内部box会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由margin决定，在一个BFC中，两个相邻的块级盒子的垂直外边距会产生折叠。</li><li>在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）</li><li>形成了BFC的区域不会与float box重叠</li><li>计算BFC高度时，浮动元素也参与计算</li></ul><p>BFC作用：</p><ol><li>利用特性4可实现左图右文之类的效果：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'image.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是超长的文字<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>:left</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>利用特性5可以解决浮动元素造成的父元素高度塌陷问题：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'parent'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'float'</span>&gt;</span>浮动元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      CSS 用于控制网页的样式和布局。
    
    </summary>
    
    
      <category term="面试" scheme="https://SmileLJZ.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="css" scheme="https://SmileLJZ.github.io/tags/css/"/>
    
      <category term="css3" scheme="https://SmileLJZ.github.io/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://smileljz.github.io/2020/07/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://smileljz.github.io/2020/07/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2020-07-19T17:02:48.000Z</published>
    <updated>2020-07-20T11:22:53.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单讲解一下http2的多路复用"><a href="#简单讲解一下http2的多路复用" class="headerlink" title="简单讲解一下http2的多路复用"></a>简单讲解一下http2的多路复用</h1><p>在 HTTP/1 中，每次请求都会建立一次HTTP连接，也就是我们常说的3次握手4次挥手，这个过程在一次请求过程中占用了相当长的时间，即使开启了 Keep-Alive ，解决了多次连接的问题，但是依然有两个效率上的问题：</p><ul><li>第一个：串行的文件传输。当请求a文件时，b文件只能等待，等待a连接到服务器、服务器处理文件、服务器返回文件，这三个步骤。我们假设这三步用时都是1秒，那么a文件用时为3秒，b文件传输完成用时为6秒，依此类推。（注：此项计算有一个前提条件，就是浏览器和服务器是单通道传输）</li><li>第二个：连接数过多。我们假设Apache设置了最大并发数为300，因为浏览器限制，浏览器发起的最大请求数为6，也就是服务器能承载的最高并发为50，当第51个人访问时，就需要等待前面某个请求处理完成。</li></ul><p>HTTP/2的多路复用就是为了解决上述的两个性能问题。 在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。 帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。 多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</p><hr><h1 id="谈谈你对TCP三次握手和四次挥手的理解"><a href="#谈谈你对TCP三次握手和四次挥手的理解" class="headerlink" title="谈谈你对TCP三次握手和四次挥手的理解"></a>谈谈你对TCP三次握手和四次挥手的理解</h1><p>比喻：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">男：我要挂了哦 </span><br><span class="line">女：等哈，我还要敷面膜 </span><br><span class="line">女：我敷完了，现在可以挂了 </span><br><span class="line">男：我舍不得挂，你挂吧 </span><br><span class="line">女：好吧，我挂了 </span><br><span class="line">男：等了2MSL听见嘟嘟嘟的声音后挂断</span><br></pre></td></tr></table></figure><p>图解：<br><img src= "/img/loading.gif" data-src="https://user-images.githubusercontent.com/34148615/53062591-3d846300-34fc-11e9-8d0f-4063d9ff3398.png" alt></p><hr><h1 id="介绍-HTTPS-握手过程"><a href="#介绍-HTTPS-握手过程" class="headerlink" title="介绍 HTTPS 握手过程"></a>介绍 HTTPS 握手过程</h1><ol><li>客户端使用https的url访问web服务器,要求与服务器建立ssl连接</li><li>web服务器收到客户端请求后, 会将网站的证书(包含公钥)传送一份给客户端</li><li>客户端收到网站证书后会检查证书的颁发机构以及过期时间, 如果没有问题就随机产生一个秘钥</li><li>客户端利用公钥将会话秘钥加密, 并传送给服务端, 服务端利用自己的私钥解密出会话秘钥</li><li>之后服务器与客户端使用秘钥加密传输</li></ol><hr><h1 id="HTTPS-握手过程中，客户端如何验证证书的合法性"><a href="#HTTPS-握手过程中，客户端如何验证证书的合法性" class="headerlink" title="HTTPS 握手过程中，客户端如何验证证书的合法性"></a>HTTPS 握手过程中，客户端如何验证证书的合法性</h1><ol><li><p>首先什么是HTTP协议? http协议是超文本传输协议，位于tcp/ip四层模型中的应用层；通过请求/响应的方式在客户端和服务器之间进行通信；但是缺少安全性，http协议信息传输是通过明文的方式传输，不做任何加密，相当于在网络上裸奔；容易被中间人恶意篡改，这种行为叫做中间人攻击； </p></li><li><p>加密通信： 为了安全性，双方可以使用对称加密的方式key进行信息交流，但是这种方式对称加密秘钥也会被拦截，也不够安全，进而还是存在被中间人攻击风险； 于是人们又想出来另外一种方式，使用非对称加密的方式；使用公钥/私钥加解密；通信方A发起通信并携带自己的公钥，接收方B通过公钥来加密对称秘钥；然后发送给发起方A；A通过私钥解密；双发接下来通过对称秘钥来进行加密通信；但是这种方式还是会存在一种安全性；中间人虽然不知道发起方A的私钥，但是可以做到偷天换日，将拦截发起方的公钥key;并将自己生成的一对公/私钥的公钥发送给B；接收方B并不知道公钥已经被偷偷换过；按照之前的流程，B通过公钥加密自己生成的对称加密秘钥key2;发送给A； 这次通信再次被中间人拦截，尽管后面的通信，两者还是用key2通信，但是中间人已经掌握了Key2;可以进行轻松的加解密；还是存在被中间人攻击风险；</p></li><li><p>解决困境：权威的证书颁发机构CA来解决； 3.1制作证书：作为服务端的A，首先把自己的公钥key1发给证书颁发机构，向证书颁发机构进行申请证书；证书颁发机构有一套自己的公私钥，CA通过自己的私钥来加密key1,并且通过服务端网址等信息生成一个证书签名，证书签名同样使用机构的私钥进行加密；制作完成后，机构将证书发给A； 3.2校验证书真伪：当B向服务端A发起请求通信的时候，A不再直接返回自己的公钥，而是返回一个证书； 说明：各大浏览器和操作系统已经维护了所有的权威证书机构的名称和公钥。B只需要知道是哪个权威机构发的证书，使用对应的机构公钥，就可以解密出证书签名；接下来，B使用同样的规则，生成自己的证书签名，如果两个签名是一致的，说明证书是有效的； 签名验证成功后，B就可以再次利用机构的公钥，解密出A的公钥key1;接下来的操作，就是和之前一样的流程了； 3.3：中间人是否会拦截发送假证书到B呢？ 因为证书的签名是由服务器端网址等信息生成的，并且通过第三方机构的私钥加密中间人无法篡改； 所以最关键的问题是证书签名的真伪；</p></li><li><p>https主要的思想是在http基础上增加了ssl安全层，即以上认证过程；:</p></li></ol><hr><h1 id="介绍下-HTTPS-中间人攻击"><a href="#介绍下-HTTPS-中间人攻击" class="headerlink" title="介绍下 HTTPS 中间人攻击"></a>介绍下 HTTPS 中间人攻击</h1><p>中间人攻击过程如下：</p><ol><li>服务器向客户端发送公钥。</li><li>攻击者截获公钥，保留在自己手上。</li><li>然后攻击者自己生成一个【伪造的】公钥，发给客户端。</li><li>客户端收到伪造的公钥后，生成加密hash值发给服务器。</li><li>攻击者获得加密hash值，用自己的私钥解密获得真秘钥。</li><li>同时生成假的加密hash值，发给服务器。</li><li>服务器用私钥解密获得假秘钥。</li><li>服务器用加秘钥加密传输信息<br>防范方法：</li></ol><ul><li>服务端在发送浏览器的公钥中加入CA证书，浏览器可以验证CA证书的有效性</li></ul><hr><h1 id="http1-0-http1-1-http2-0特性及区别"><a href="#http1-0-http1-1-http2-0特性及区别" class="headerlink" title="http1.0 http1.1 http2.0特性及区别"></a>http1.0 http1.1 http2.0特性及区别</h1><h2 id="http1-0特性"><a href="#http1-0特性" class="headerlink" title="http1.0特性"></a>http1.0特性</h2><ul><li>无状态：服务器不跟踪不记录请求过的状态</li><li>无连接：浏览器每次请求都需要建立tcp连接</li></ul><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>对于无状态的特性可以借助cookie/session机制来做身份认证和状态记录</p><h3 id="无连接"><a href="#无连接" class="headerlink" title="无连接"></a>无连接</h3><p>无连接导致的性能缺陷有两种：</p><ol><li><p>无法复用连接<br><br>每次发送请求，都需要进行一次tcp连接（即3次握手4次挥手），使得网络的利用率非常低</p></li><li><p>队头阻塞<br><br>http1.0规定在前一个请求响应到达之后下一个请求才能发送，如果前一个阻塞，后面的请求也给阻塞的</p></li></ol><h2 id="http1-1特性"><a href="#http1-1特性" class="headerlink" title="http1.1特性"></a>http1.1特性</h2><p>为了解决http1.0的性能缺陷，http1.1出现了</p><p>http1.1特性：</p><ul><li>长连接：新增Connection字段，可以设置keep-alive值保持连接不断开</li><li>管道化：基于上面长连接的基础，管道化可以不等第一个请求响应继续发送后面的请求，但响应的顺序还是按照请求的顺序返回</li><li>缓存处理：新增字段cache-control</li><li>断点传输</li></ul><h3 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h3><p>http1.1默认保持长连接，数据传输完成保持tcp连接不断开,继续用这个通道传输数据</p><h3 id="管道化"><a href="#管道化" class="headerlink" title="管道化"></a>管道化</h3><p>基于长连接的基础，我们先看没有管道化请求响应：</p><p>tcp没有断开，用的同一个通道</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请求1 &gt; 响应1 --&gt; 请求2 &gt; 响应2 --&gt; 请求3 &gt; 响应3</span><br></pre></td></tr></table></figure><p>管道化的请求响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请求1 --&gt; 请求2 --&gt; 请求3 &gt; 响应1 --&gt; 响应2 --&gt; 响应3</span><br></pre></td></tr></table></figure><p>即使服务器先准备好响应2,也是按照请求顺序先返回响应1</p><p>虽然管道化，可以一次发送多个请求，但是响应仍是顺序返回，仍然无法解决队头阻塞的问题</p><h3 id="缓存处理"><a href="#缓存处理" class="headerlink" title="缓存处理"></a>缓存处理</h3><p>当浏览器请求资源时，先看是否有缓存的资源，如果有缓存，直接取，不会再发请求，如果没有缓存，则发送请求</p><p>通过设置字段cache-control来控制</p><h3 id="断点传输"><a href="#断点传输" class="headerlink" title="断点传输"></a>断点传输</h3><p>在上传/下载资源时，如果资源过大，将其分割为多个部分，分别上传/下载，如果遇到网络故障，可以从已经上传/下载好的地方继续请求，不用从头开始，提高效率</p><p>在 Header 里两个参数实现的，客户端发请求时对应的是 Range 服务器端响应时对应的是 Content-Range</p><h2 id="http2-0特性"><a href="#http2-0特性" class="headerlink" title="http2.0特性"></a>http2.0特性</h2><ul><li>二进制分帧</li><li>多路复用： 在共享TCP链接的基础上同时发送请求和响应</li><li>头部压缩</li><li>服务器推送：服务器可以额外的向客户端推送资源，而无需客户端明确的请求</li></ul><h3 id="二进制分帧"><a href="#二进制分帧" class="headerlink" title="二进制分帧"></a>二进制分帧</h3><p>将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码</p><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3><p>基于二进制分帧，在同一域名下所有访问都是从同一个tcp连接中走，http消息被分解为独立的帧，乱序发送，服务端根据标识符和首部将消息重新组装起来</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>http1.0 到http1.1的主要区别，就是从无连接到长连接</li><li>http2.0对比1.X版本主要区别就是多路复用</li></ul><hr><h1 id="永久性重定向（301）和临时性重定向（302）对-SEO-有什么影响"><a href="#永久性重定向（301）和临时性重定向（302）对-SEO-有什么影响" class="headerlink" title="永久性重定向（301）和临时性重定向（302）对 SEO 有什么影响"></a>永久性重定向（301）和临时性重定向（302）对 SEO 有什么影响</h1><p>1）301 redirect——301代表永久性转移(Permanently Moved)，301重定向是网页更改地址后对搜索引擎友好的最好方法，只要不是暂时搬移的情况,都建议使用301来做转址。 如果我们把一个地址采用301跳转方式跳转的话，搜索引擎会把老地址的PageRank等信息带到新地址，同时在搜索引擎索引库中彻底废弃掉原先的老地址。旧网址的排名等完全清零</p><p>（2）302 redirect——302代表暂时性转移(Temporarily Moved )，在前些年，不少Black Hat SEO曾广泛应用这项技术作弊，目前，各大主要搜索引擎均加强了打击力度，象Google前些年对Business.com以及近来对BMW德国网站的惩罚。即使网站客观上不是spam，也很容易被搜寻引擎容易误判为spam而遭到惩罚。</p><hr><h1 id="Http-状态码-301-和-302-的应用场景分别是什么"><a href="#Http-状态码-301-和-302-的应用场景分别是什么" class="headerlink" title="Http 状态码 301 和 302 的应用场景分别是什么"></a>Http 状态码 301 和 302 的应用场景分别是什么</h1><p>301应用场景: 域名到期不想继续用这个,换了地址<br>302应用场景: 做活动时候,从首页跳到活动页面,</p><hr><h1 id="接口如何防刷"><a href="#接口如何防刷" class="headerlink" title="接口如何防刷"></a>接口如何防刷</h1><ol><li>网关控制流量洪峰，对在一个时间段内出现流量异常，可以拒绝请求</li><li>源ip请求个数限制。对请求来源的ip请求个数做限制 </li><li>http请求头信息校验；（例如host，User-Agent，Referer）</li><li>对用户唯一身份uid进行限制和校验。例如基本的长度，组合方式，甚至有效性进行判断。或者uid具有一定的时效性</li><li>前后端协议采用二进制方式进行交互或者协议采用签名机制 </li><li>人机验证，验证码，短信验证码，滑动图片形式，12306形式</li></ol><hr><h1 id="为什么-HTTP1-1-不能实现多路复用"><a href="#为什么-HTTP1-1-不能实现多路复用" class="headerlink" title="为什么 HTTP1.1 不能实现多路复用"></a>为什么 HTTP1.1 不能实现多路复用</h1><p>HTTP/1.1 不是二进制传输，而是通过文本进行传输。由于没有流的概念，在使用并行传输（多路复用）传递数据时，接收端在接收到响应后，并不能区分多个响应分别对应的请求，所以无法将多个响应的结果重新进行组装，也就实现不了多路复用。</p><hr><h1 id="HTTP报文结构是什么"><a href="#HTTP报文结构是什么" class="headerlink" title="HTTP报文结构是什么"></a>HTTP报文结构是什么</h1><p>对于 TCP 而言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">起始行 + 头部 + 空行 + 实体</span><br></pre></td></tr></table></figure><blockquote><p>空行是用来分开头部和实体。</p></blockquote><ol><li>请求报文</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;home HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730d8b6a53d2d7a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><ol start="2"><li>响应报文</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730d8b8b2a02d6f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><hr><h1 id="HTTP请求方法有哪些"><a href="#HTTP请求方法有哪些" class="headerlink" title="HTTP请求方法有哪些"></a>HTTP请求方法有哪些</h1><ul><li>GET方法，用来获取资源</li><li>POST方法，用来提交数据</li><li>PUT方法，用来修改数据</li><li>DELETE方法，用来删除资源</li><li>OPTIONS方法，用来跨域请求</li><li>HEAD方法，用来获取资源的元信息</li><li>CONNECT方法，用来建立连接，用于代理服务器</li><li></li></ul><hr><h1 id="对URI是如何理解的"><a href="#对URI是如何理解的" class="headerlink" title="对URI是如何理解的"></a>对URI是如何理解的</h1><p>URL统一资源定位符，URI，统一资源标识符。URI用于区分网络上不同的资源。</p><p>URI包含了URN和URL。</p><p>URL的结构：</p><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730d922c915cb25?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><blockquote><p>协议名，登录主机的用户信息，主机名和端口，请求路径，查询参数，URI上定位资源内的一个锚点。</p></blockquote><hr><h1 id="对HTTP状态码的了解"><a href="#对HTTP状态码的了解" class="headerlink" title="对HTTP状态码的了解"></a>对HTTP状态码的了解</h1><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730d9c4c31cebad?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730d9ff3358a7db?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><hr><h1 id="说说HTTP特点以及缺点"><a href="#说说HTTP特点以及缺点" class="headerlink" title="说说HTTP特点以及缺点"></a>说说HTTP特点以及缺点</h1><p>特点是：</p><p>灵活可扩展<br>可靠传输<br>无状态等<br>缺点是：</p><p>无状态<br>明文传输<br>队头阻塞问题</p><hr><h1 id="对Accept字段的理解"><a href="#对Accept字段的理解" class="headerlink" title="对Accept字段的理解"></a>对Accept字段的理解</h1><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730da1b00192b77?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730da3125c65de9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><ul><li>数据格式</li><li>压缩方式</li><li>支持语言</li><li>字符集</li></ul><hr><h1 id="什么是队头阻塞问题"><a href="#什么是队头阻塞问题" class="headerlink" title="什么是队头阻塞问题"></a>什么是队头阻塞问题</h1><p>TCP中是报文，HTTP是请求。</p><p>对于解决HTTP的队头阻塞问题是：并发连接和域名分片。</p><h1 id="对HTTP代理的理解"><a href="#对HTTP代理的理解" class="headerlink" title="对HTTP代理的理解"></a>对HTTP代理的理解</h1><p>代理服务器功能：</p><ol><li>负载均衡;</li><li>保障安全（利用心跳机制监控服务器，一旦发现故障机就将其踢出集群。）;</li><li>缓存代理;</li></ol><p>理解代理缓存：</p><ul><li>由一个代理服务器下载的页面存储；</li><li>一个代理服务器为多个用户提供一条通道；</li><li>缓冲的代理允许一个代理服务器减少对同一个网站的同样页面的请求次数</li><li>一旦代理服务器的一个用户请求了某个页面，代理服务器就保存该页面以服务于它的其他用户的同样的请求</li><li>代理缓存，这种处理减少了用户等待页面显示的时间</li></ul><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730e1d851e2612e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><p>缓存的作用：</p><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730e3846c985a5b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><blockquote><p>代理服务器或客户端本地磁盘内保存的资源副本，利用缓存可减少对源服务器的访问，可以节省通信流量和通信时间。</p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: max-age&#x3D;300；</span><br></pre></td></tr></table></figure><p>表示时间间隔，再次请求的时间间隔300s内，就在缓存中获取，否则就在服务器中</p><p>Cache-Control:</p><ul><li>public 表示响应可被任何中间节点缓存</li><li>private 表示中间节点不允许缓存</li><li>no-cache 表示不使用Cache-Control的缓存控制方式做前置验证</li><li>no-store 表示真正的不缓存任何东西</li><li>max-age 表示当前资源的有效时间</li></ul><p>强缓存：浏览器直接从本地存储中获取数据，不与服务器进行交互</p><p>协商缓存：浏览器发送请求到服务器，浏览器判断是否可使用本地缓存</p><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><p>强缓存主要学习expires和cache-control</p><p>cache-control该字段：max-age，s-maxage，public，private，no-cache，no-store。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cache-control: public, max-age&#x3D;3600, s-maxage&#x3D;3600</span><br></pre></td></tr></table></figure><ul><li>表示资源过了多少秒之后变为无效</li><li>s-maxage 的优先级高于 max-age</li><li>在代理服务器中，只有 s-maxage 起作用</li></ul><p>public 和 private</p><ul><li>public 表示该资源可以被所有客户端和代理服务器缓存</li><li>private 表示该资源仅能客户端缓存</li></ul><p>当浏览器去请求某个文件的时候，服务端就在response header里做了缓存的配置：</p><blockquote><p>表现为：respone header 的cache-control</p></blockquote><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730e3a45add53fe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730e40361679b99?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>response header里面的设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">etag: &#39;xxxx-xxx</span><br><span class="line">last-modified: xx, 24 Dec xxx xxx:xx:xx GMT</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730e4ccfb831f4c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730e50ac0c7b4d8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730e54ea7d82497?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><hr><h1 id="关于HTTP-2"><a href="#关于HTTP-2" class="headerlink" title="关于HTTP/2"></a>关于HTTP/2</h1><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2020/7/2/1730e6a4b02fba2f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><p>HTTP/2采用哈夫曼编码来压缩整数和字符串，可以达到50%~90%的高压缩率。</p>]]></content>
    
    <summary type="html">
    
      计算机网络知识，是面试常考的内容，在实际工作中也常常会涉及到。
    
    </summary>
    
    
      <category term="面试" scheme="https://SmileLJZ.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="计算机网络" scheme="https://SmileLJZ.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="http/TCP" scheme="https://SmileLJZ.github.io/tags/http-TCP/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript（5）</title>
    <link href="https://smileljz.github.io/2020/07/14/TypeScript%EF%BC%885%EF%BC%89/"/>
    <id>https://smileljz.github.io/2020/07/14/TypeScript%EF%BC%885%EF%BC%89/</id>
    <published>2020-07-14T02:54:16.000Z</published>
    <updated>2020-07-14T04:23:20.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript-对象"><a href="#TypeScript-对象" class="headerlink" title="TypeScript 对象"></a>TypeScript 对象</h1><p>对象是包含一组键值对的实例。 值可以是标量、函数、数组、对象等，如下实例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object_name = &#123; </span><br><span class="line">    key1: <span class="string">"value1"</span>, <span class="comment">// 标量</span></span><br><span class="line">    key2: <span class="string">"value"</span>,  </span><br><span class="line">    key3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 函数</span></span><br><span class="line">    &#125;, </span><br><span class="line">    key4:[<span class="string">"content1"</span>, <span class="string">"content2"</span>] <span class="comment">//集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上对象包含了标量，函数，集合(数组或元组)。</p><h2 id="对象实例"><a href="#对象实例" class="headerlink" title="对象实例"></a>对象实例</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sites = &#123; </span><br><span class="line">   site1:<span class="string">"Runoob"</span>, </span><br><span class="line">   site2:<span class="string">"Google"</span> </span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// 访问对象的值</span></span><br><span class="line"><span class="built_in">console</span>.log(sites.site1) </span><br><span class="line"><span class="built_in">console</span>.log(sites.site2)</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sites = &#123; </span><br><span class="line">   site1:<span class="string">"Runoob"</span>, </span><br><span class="line">   site2:<span class="string">"Google"</span> </span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// 访问对象的值</span></span><br><span class="line"><span class="built_in">console</span>.log(sites.site1) </span><br><span class="line"><span class="built_in">console</span>.log(sites.site2)</span><br><span class="line">invokesites(sites);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runoob</span><br><span class="line">Google</span><br></pre></td></tr></table></figure><hr><h2 id="TypeScript-类型模板"><a href="#TypeScript-类型模板" class="headerlink" title="TypeScript 类型模板"></a>TypeScript 类型模板</h2><p>假如我们在 JavaScript 定义了一个对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var sites &#x3D; &#123; </span><br><span class="line">   site1:&quot;Runoob&quot;, </span><br><span class="line">   site2:&quot;Google&quot; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这时如果我们想在对象中添加方法，可以做以下修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sites.sayHello &#x3D; function()&#123; return &quot;hello&quot;;&#125;</span><br></pre></td></tr></table></figure><p>如果在 TypeScript 中使用以上方式则会出现编译错误，因为Typescript 中的对象必须是特定类型的实例。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sites = &#123;</span><br><span class="line">    site1: <span class="string">"Runoob"</span>,</span><br><span class="line">    site2: <span class="string">"Google"</span>,</span><br><span class="line">    sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125; <span class="comment">// 类型模板</span></span><br><span class="line">&#125;;</span><br><span class="line">sites.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello "</span> + sites.site1);</span><br><span class="line">&#125;;</span><br><span class="line">sites.sayHello();</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sites = &#123;</span><br><span class="line">    site1: <span class="string">"Runoob"</span>,</span><br><span class="line">    site2: <span class="string">"Google"</span>,</span><br><span class="line">    sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125; <span class="comment">// 类型模板</span></span><br><span class="line">&#125;;</span><br><span class="line">sites.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello "</span> + sites.site1);</span><br><span class="line">&#125;;</span><br><span class="line">sites.sayHello();</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello Runoob</span><br></pre></td></tr></table></figure><p>此外对象也可以作为一个参数传递给函数，如下实例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sites = &#123; </span><br><span class="line">    site1:<span class="string">"Runoob"</span>, </span><br><span class="line">    site2:<span class="string">"Google"</span>,</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">var</span> invokesites = <span class="function"><span class="keyword">function</span>(<span class="params">obj: &#123; site1:<span class="built_in">string</span>, site2 :<span class="built_in">string</span> &#125;</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"site1 :"</span>+obj.site1) </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"site2 :"</span>+obj.site2) </span><br><span class="line">&#125; </span><br><span class="line">invokesites(sites)</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sites = &#123;</span><br><span class="line">    site1: <span class="string">"Runoob"</span>,</span><br><span class="line">    site2: <span class="string">"Google"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> invokesites = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"site1 :"</span> + obj.site1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"site2 :"</span> + obj.site2);</span><br><span class="line">&#125;;</span><br><span class="line">invokesites(sites);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site1 :Runoob</span><br><span class="line">site2 :Google</span><br></pre></td></tr></table></figure><h2 id="鸭子类型-Duck-Typing"><a href="#鸭子类型-Duck-Typing" class="headerlink" title="鸭子类型(Duck Typing)"></a>鸭子类型(Duck Typing)</h2><p>鸭子类型（英语：duck typing）是动态类型的一种风格，是多态(polymorphism)的一种形式。</p><p>在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由”当前方法和属性的集合”决定。</p><blockquote><p>可以这样表述：<br><br>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p></blockquote><p>在鸭子类型中，关注点在于对象的行为，能作什么；而不是关注对象所属的类型。例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为”鸭子”的对象，并调用它的”走”和”叫”方法。在使用鸭子类型的语言中，这样的一个函数可以接受一个任意类型的对象，并调用它的”走”和”叫”方法。如果这些需要被调用的方法不存在，那么将引发一个运行时错误。任何拥有这样的正确的”走”和”叫”方法的对象都可被函数接受的这种行为引出了以上表述，这种决定类型的方式因此得名。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPoint &#123; </span><br><span class="line">    x:<span class="built_in">number</span> </span><br><span class="line">    y:<span class="built_in">number</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addPoints</span>(<span class="params">p1:IPoint,p2:IPoint</span>):<span class="title">IPoint</span> </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> x = p1.x + p2.x </span><br><span class="line">    <span class="keyword">var</span> y = p1.y + p2.y </span><br><span class="line">    <span class="keyword">return</span> &#123;x:x,y:y&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> newPoint = addPoints(&#123;x:<span class="number">3</span>,y:<span class="number">4</span>&#125;,&#123;x:<span class="number">5</span>,y:<span class="number">1</span>&#125;)  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 错误 </span></span><br><span class="line"><span class="keyword">var</span> newPoint2 = addPoints(&#123;x:<span class="number">1</span>&#125;,&#123;x:<span class="number">4</span>,y:<span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="TypeScript-命名空间"><a href="#TypeScript-命名空间" class="headerlink" title="TypeScript 命名空间"></a>TypeScript 命名空间</h1><p>命名空间一个最明确的目的就是解决重名问题。</p><p>假设这样一种情况，当一个班上有两个名叫小明的学生时，为了明确区分它们，我们在使用名字之外，不得不使用一些额外的信息，比如他们的姓（王小明，李小明），或者他们父母的名字等等。</p><p>命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的。这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中。</p><p>TypeScript 中命名空间使用 <code>namespace</code> 来定义，语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">namespace SomeNameSpaceName &#123; </span><br><span class="line">   export interface ISomeInterfaceName &#123;      &#125;  </span><br><span class="line">   export class SomeClassName &#123;      &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上定义了一个命名空间 SomeNameSpaceName，如果我们需要在外部可以调用 SomeNameSpaceName 中的类和接口，则需要在类和接口添加 <code>export</code> 关键字。</p><p>要在另外一个命名空间调用语法格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SomeNameSpaceName.SomeClassName;</span><br></pre></td></tr></table></figure><p>如果一个命名空间在一个单独的 TypeScript 文件中，则应使用三斜杠 /// 引用它，语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;reference path &#x3D; &quot;SomeFileName.ts&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>以下实例演示了命名空间的使用，定义在不同文件中：</p><blockquote><p>IShape.ts 文件代码：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Drawing &#123; </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> IShape &#123; </span><br><span class="line">        draw(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Circle.ts 文件代码：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path = "IShape.ts" /&gt; </span></span><br><span class="line"><span class="keyword">namespace</span> Drawing &#123; </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Triangle <span class="keyword">implements</span> IShape &#123; </span><br><span class="line">        <span class="keyword">public</span> draw() &#123; </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Triangle is drawn"</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Triangle.ts 文件代码：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path = "IShape.ts" /&gt; </span></span><br><span class="line"><span class="keyword">namespace</span> Drawing &#123; </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Triangle <span class="keyword">implements</span> IShape &#123; </span><br><span class="line">        <span class="keyword">public</span> draw() &#123; </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Triangle is drawn"</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>TestShape.ts 文件代码：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path = "IShape.ts" /&gt;   </span></span><br><span class="line"><span class="comment">/// &lt;reference path = "Circle.ts" /&gt; </span></span><br><span class="line"><span class="comment">/// &lt;reference path = "Triangle.ts" /&gt;  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawAllShapes</span>(<span class="params">shape:Drawing.IShape</span>) </span>&#123; </span><br><span class="line">    shape.draw(); </span><br><span class="line">&#125; </span><br><span class="line">drawAllShapes(<span class="keyword">new</span> Drawing.Circle());</span><br><span class="line">drawAllShapes(<span class="keyword">new</span> Drawing.Triangle());</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --out app.js TestShape.ts</span><br></pre></td></tr></table></figure><p>得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path = "IShape.ts" /&gt; </span></span><br><span class="line"><span class="keyword">var</span> Drawing;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Drawing</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Circle = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        Circle.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Circle is drawn"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> Circle;</span><br><span class="line">    &#125;());</span><br><span class="line">    Drawing.Circle = Circle;</span><br><span class="line">&#125;)(Drawing || (Drawing = &#123;&#125;));</span><br><span class="line"><span class="comment">/// &lt;reference path = "IShape.ts" /&gt; </span></span><br><span class="line"><span class="keyword">var</span> Drawing;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Drawing</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Triangle = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Triangle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        Triangle.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Triangle is drawn"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> Triangle;</span><br><span class="line">    &#125;());</span><br><span class="line">    Drawing.Triangle = Triangle;</span><br><span class="line">&#125;)(Drawing || (Drawing = &#123;&#125;));</span><br><span class="line"><span class="comment">/// &lt;reference path = "IShape.ts" /&gt;   </span></span><br><span class="line"><span class="comment">/// &lt;reference path = "Circle.ts" /&gt; </span></span><br><span class="line"><span class="comment">/// &lt;reference path = "Triangle.ts" /&gt;  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawAllShapes</span>(<span class="params">shape</span>) </span>&#123;</span><br><span class="line">    shape.draw();</span><br><span class="line">&#125;</span><br><span class="line">drawAllShapes(<span class="keyword">new</span> Drawing.Circle());</span><br><span class="line">drawAllShapes(<span class="keyword">new</span> Drawing.Triangle());</span><br></pre></td></tr></table></figure><p>使用 node 命令查看输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node app.js</span><br><span class="line">Circle is drawn</span><br><span class="line">Triangle is drawn</span><br></pre></td></tr></table></figure><hr><h2 id="嵌套命名空间"><a href="#嵌套命名空间" class="headerlink" title="嵌套命名空间"></a>嵌套命名空间</h2><p>命名空间支持嵌套，即你可以将命名空间定义在另外一个命名空间里头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">namespace namespace_name1 &#123; </span><br><span class="line">    export namespace namespace_name2 &#123;</span><br><span class="line">        export class class_name &#123;    &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成员的访问使用点号 . 来实现，如下实例：</p><blockquote><p>Invoice.ts 文件代码：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Runoob &#123; </span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">namespace</span> invoiceApp &#123; </span><br><span class="line">      <span class="keyword">export</span> <span class="keyword">class</span> Invoice &#123; </span><br><span class="line">         <span class="keyword">public</span> calculateDiscount(price: <span class="built_in">number</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> price * <span class="number">.40</span>; </span><br><span class="line">         &#125; </span><br><span class="line">      &#125; </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>InvoiceTest.ts 文件代码：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path = "Invoice.ts" /&gt;</span></span><br><span class="line"><span class="keyword">var</span> invoice = <span class="keyword">new</span> Runoob.invoiceApp.Invoice(); </span><br><span class="line"><span class="built_in">console</span>.log(invoice.calculateDiscount(<span class="number">500</span>));</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --out app.js InvoiceTest.ts</span><br></pre></td></tr></table></figure><p>得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Runoob;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Runoob</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> invoiceApp;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">invoiceApp</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Invoice = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">Invoice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">            Invoice.prototype.calculateDiscount = <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> price * <span class="number">.40</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> Invoice;</span><br><span class="line">        &#125;());</span><br><span class="line">        invoiceApp.Invoice = Invoice;</span><br><span class="line">    &#125;)(invoiceApp = Runoob.invoiceApp || (Runoob.invoiceApp = &#123;&#125;));</span><br><span class="line">&#125;)(Runoob || (Runoob = &#123;&#125;));</span><br><span class="line"><span class="comment">/// &lt;reference path = "Invoice.ts" /&gt;</span></span><br><span class="line"><span class="keyword">var</span> invoice = <span class="keyword">new</span> Runoob.invoiceApp.Invoice();</span><br><span class="line"><span class="built_in">console</span>.log(invoice.calculateDiscount(<span class="number">500</span>));</span><br></pre></td></tr></table></figure><p>使用 node 命令查看输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node app.js</span><br><span class="line">200</span><br></pre></td></tr></table></figure><hr><h1 id="TypeScript-模块"><a href="#TypeScript-模块" class="headerlink" title="TypeScript 模块"></a>TypeScript 模块</h1><p>TypeScript 模块的设计理念是可以更换的组织代码。</p><p>模块是在其自身的作用域里执行，并不是在全局作用域，这意味着定义在模块里面的变量、函数和类等在模块外部是不可见的，除非明确地使用 <code>export</code> 导出它们。类似地，我们必须通过 <code>import</code> 导入其他模块导出的变量、函数、类等。</p><p>两个模块之间的关系是通过在文件级别上使用 <code>import</code> 和 <code>export</code> 建立的。</p><p>模块使用模块加载器去导入其它的模块。 在运行时，模块加载器的作用是在执行此模块代码前去查找并执行这个模块的所有依赖。 大家最熟知的JavaScript模块加载器是服务于 Node.js 的 CommonJS 和服务于 Web 应用的 Require.js。</p><p>此外还有有 SystemJs 和 Webpack。</p><p>模块导出使用关键字 <code>export</code> 关键字，语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 文件名 : SomeInterface.ts </span><br><span class="line">export interface SomeInterface &#123; </span><br><span class="line">   &#x2F;&#x2F; 代码部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要在另外一个文件使用该模块就需要使用 import 关键字来导入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import someInterfaceRef &#x3D; require(&quot;.&#x2F;SomeInterface&quot;);</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote><p>IShape.ts 文件代码：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path = "IShape.ts" /&gt; </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IShape &#123; </span><br><span class="line">   draw(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Circle.ts 文件代码：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shape = <span class="built_in">require</span>(<span class="string">"./IShape"</span>); </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Circle <span class="keyword">implements</span> shape.IShape &#123; </span><br><span class="line">   <span class="keyword">public</span> draw() &#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Cirlce is drawn (external module)"</span>); </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Triangle.ts 文件代码：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shape = <span class="built_in">require</span>(<span class="string">"./IShape"</span>); </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Triangle <span class="keyword">implements</span> shape.IShape &#123; </span><br><span class="line">   <span class="keyword">public</span> draw() &#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Triangle is drawn (external module)"</span>); </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>TestShape.ts 文件代码：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shape = <span class="built_in">require</span>(<span class="string">"./IShape"</span>); </span><br><span class="line"><span class="keyword">import</span> circle = <span class="built_in">require</span>(<span class="string">"./Circle"</span>); </span><br><span class="line"><span class="keyword">import</span> triangle = <span class="built_in">require</span>(<span class="string">"./Triangle"</span>);  </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawAllShapes</span>(<span class="params">shapeToDraw: shape.IShape</span>) </span>&#123;</span><br><span class="line">   shapeToDraw.draw(); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">drawAllShapes(<span class="keyword">new</span> circle.Circle()); </span><br><span class="line">drawAllShapes(<span class="keyword">new</span> triangle.Triangle());</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码（AMD）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --module amd TestShape.ts</span><br></pre></td></tr></table></figure><p>得到以下 JavaScript 代码：</p><blockquote><p>IShape.js 文件代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">"require"</span>, <span class="string">"exports"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require, exports</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>Circle.js 文件代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">"require"</span>, <span class="string">"exports"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require, exports</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> Circle = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line">      Circle.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"Cirlce is drawn (external module)"</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> Circle;</span><br><span class="line">   &#125;)();</span><br><span class="line">   exports.Circle = Circle;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>Triangle.js 文件代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">"require"</span>, <span class="string">"exports"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require, exports</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> Triangle = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">Triangle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line">      Triangle.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"Triangle is drawn (external module)"</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> Triangle;</span><br><span class="line">   &#125;)();</span><br><span class="line">   exports.Triangle = Triangle;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>TestShape.js 文件代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">"require"</span>, <span class="string">"exports"</span>, <span class="string">"./Circle"</span>, <span class="string">"./Triangle"</span>], </span><br><span class="line">   <span class="function"><span class="keyword">function</span> (<span class="params">require, exports, circle, triangle</span>) </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">drawAllShapes</span>(<span class="params">shapeToDraw</span>) </span>&#123;</span><br><span class="line">      shapeToDraw.draw();</span><br><span class="line">   &#125;</span><br><span class="line">   drawAllShapes(<span class="keyword">new</span> circle.Circle());</span><br><span class="line">   drawAllShapes(<span class="keyword">new</span> triangle.Triangle());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码（Commonjs）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --module commonjs TestShape.ts</span><br></pre></td></tr></table></figure><p>得到以下 JavaScript 代码：</p><blockquote><p>Circle.js 文件代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Circle = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   Circle.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Cirlce is drawn"</span>);</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">return</span> Circle;</span><br><span class="line">&#125;)();</span><br><span class="line"> </span><br><span class="line">exports.Circle = Circle;</span><br></pre></td></tr></table></figure><blockquote><p>Triangle.js 文件代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Triangle = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Triangle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   Triangle.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Triangle is drawn (external module)"</span>);</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">return</span> Triangle;</span><br><span class="line">&#125;)();</span><br><span class="line">exports.Triangle = Triangle;</span><br></pre></td></tr></table></figure><blockquote><p>TestShape.js 文件代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> circle = <span class="built_in">require</span>(<span class="string">"./Circle"</span>);</span><br><span class="line"><span class="keyword">var</span> triangle = <span class="built_in">require</span>(<span class="string">"./Triangle"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawAllShapes</span>(<span class="params">shapeToDraw</span>) </span>&#123;</span><br><span class="line">   shapeToDraw.draw();</span><br><span class="line">&#125;</span><br><span class="line">drawAllShapes(<span class="keyword">new</span> circle.Circle());</span><br><span class="line">drawAllShapes(<span class="keyword">new</span> triangle.Triangle());</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cirlce is drawn (external module)</span><br><span class="line">Triangle is drawn (external module)</span><br></pre></td></tr></table></figure><hr><h1 id="TypeScript-声明文件"><a href="#TypeScript-声明文件" class="headerlink" title="TypeScript 声明文件"></a>TypeScript 声明文件</h1><p>TypeScript 作为 JavaScript 的超集，在开发过程中不可避免要引用其他第三方的 JavaScript 的库。虽然通过直接引用可以调用库的类和方法，但是却无法使用TypeScript 诸如类型检查等特性功能。为了解决这个问题，需要将这些库里的函数和方法体去掉后只保留导出类型声明，而产生了一个描述 JavaScript 库和模块信息的声明文件。通过引用这个声明文件，就可以借用 TypeScript 的各种特性来使用库文件了。</p><p>假如我们想使用第三方库，比如 jQuery，我们通常这样获取一个 id 是 foo 的元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&#39;#foo&#39;);</span><br><span class="line">&#x2F;&#x2F; 或</span><br><span class="line">jQuery(&#39;#foo&#39;);</span><br></pre></td></tr></table></figure><p>但是在 TypeScript 中，我们并不知道 $ 或 jQuery 是什么东西：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jQuery(&#39;#foo&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; index.ts(1,1): error TS2304: Cannot find name &#39;jQuery&#39;.</span><br></pre></td></tr></table></figure><p>这时，我们需要使用 declare 关键字来定义它的类型，帮助 TypeScript 判断我们传入的参数类型对不对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare var jQuery: (selector: string) &#x3D;&gt; any;</span><br><span class="line"></span><br><span class="line">jQuery(&#39;#foo&#39;);</span><br></pre></td></tr></table></figure><p>declare 定义的类型只会用于编译时的检查，编译结果中会被删除。</p><p>上例的编译结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery(&#39;#foo&#39;);</span><br></pre></td></tr></table></figure><h2 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h2><p>声明文件以 <code>.d.ts</code> 为后缀，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob.d.ts</span><br></pre></td></tr></table></figure><p>声明文件或模块的语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">declare module Module_Name &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>typescript引入声明文件语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;reference path &#x3D; &quot; runoob.d.ts&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>当然，很多流行的第三方库的声明文件不需要我们定义了，比如 jQuery 已经有人帮我们定义好了：<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/jquery/index.d.ts" target="_blank" rel="noopener">“jQuery in DefinitelyTyped。”</a></p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>以下定义一个第三方库来演示：</p><blockquote><p>CalcThirdPartyJsLib.js 文件代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Runoob;  </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">Runoob</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Calc = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Calc</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;)</span><br><span class="line">    Calc.prototype.doSum = <span class="function"><span class="keyword">function</span> (<span class="params">limit</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>; </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= limit; i++) &#123; </span><br><span class="line">            sum = sum + i; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum; </span><br><span class="line">    &#125;</span><br><span class="line">    Runoob.Calc = Calc; </span><br><span class="line">    <span class="keyword">return</span> Calc; </span><br><span class="line">&#125;)(Runoob || (Runoob = &#123;&#125;)); </span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> Runoob.Calc();</span><br></pre></td></tr></table></figure><p>如果我们想在 TypeScript 中引用上面的代码，则需要设置声明文件 Calc.d.ts，代码如下：</p><blockquote><p>Calc.d.ts 文件代码：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> Runoob &#123; </span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">class</span> Calc &#123; </span><br><span class="line">      doSum(limit:<span class="built_in">number</span>) : <span class="built_in">number</span>; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明文件不包含实现，它只是类型声明，把声明文件加入到 TypeScript 中：</p><blockquote><p>CalcTest.ts 文件代码：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path = "Calc.d.ts" /&gt; </span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Runoob.Calc(); </span><br><span class="line"><span class="comment">// obj.doSum("Hello"); // 编译错误</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.doSum(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>下面这行导致编译错误，因为我们需要传入数字参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.doSum(&quot;Hello&quot;);</span><br></pre></td></tr></table></figure><p>使用 tsc 命令来编译以上代码文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc CalcTest.ts</span><br></pre></td></tr></table></figure><p>生成的 JavaScript 代码如下：</p><blockquote><p>CalcTest.js 文件代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path = "Calc.d.ts" /&gt; </span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Runoob.Calc();</span><br><span class="line"><span class="comment">//obj.doSum("Hello"); // 编译错误</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.doSum(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>最后我们编写一个 runoob.html 文件，引入 CalcTest.js 文件及第三方库 CalcThirdPartyJsLib.js：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"CalcThirdPartyJsLib.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"CalcTest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>声明文件测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>菜鸟测试一下。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开该文件输出结果如下：</p><p><img src= "/img/loading.gif" data-src="https://www.runoob.com/wp-content/uploads/2019/01/847256CE-6F06-41FC-944E-EEB89176F358.jpg" alt="&quot;浏览器输出结果&quot;"></p>]]></content>
    
    <summary type="html">
    
      TypeScript 是 JavaScript 的一个超集，支持 ECMAScript 6 标准。 TypeScript 设计目标是开发大型应用，它可以编译成纯 JavaScript，编译出来的 JavaScript 可以运行在任何浏览器上。
    
    </summary>
    
    
      <category term="javascript" scheme="https://SmileLJZ.github.io/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://SmileLJZ.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="https://SmileLJZ.github.io/tags/javascript/"/>
    
      <category term="TypeScript" scheme="https://SmileLJZ.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript（4）</title>
    <link href="https://smileljz.github.io/2020/07/14/TypeScript%EF%BC%884%EF%BC%89/"/>
    <id>https://smileljz.github.io/2020/07/14/TypeScript%EF%BC%884%EF%BC%89/</id>
    <published>2020-07-13T17:18:21.000Z</published>
    <updated>2020-07-14T02:53:49.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript-接口"><a href="#TypeScript-接口" class="headerlink" title="TypeScript 接口"></a>TypeScript 接口</h1><p>接口是一系列抽象方法的声明，是一些方法特征的集合，这些方法都应该是抽象的，需要由具体的类去实现，然后第三方就可以通过这组抽象方法调用，让具体的类执行具体的方法。</p><p>TypeScript 接口定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">interface interface_name &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以下实例中，我们定义了一个接口 IPerson，接着定义了一个变量 customer，它的类型是 IPerson。</p><p>customer 实现了接口 IPerson 的属性和方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123; </span><br><span class="line">    firstName:<span class="built_in">string</span>, </span><br><span class="line">    lastName:<span class="built_in">string</span>, </span><br><span class="line">    sayHi: <span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">string</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> customer:IPerson = &#123; </span><br><span class="line">    firstName:<span class="string">"Tom"</span>,</span><br><span class="line">    lastName:<span class="string">"Hanks"</span>, </span><br><span class="line">    sayHi: ():<span class="function"><span class="params">string</span> =&gt;</span>&#123;<span class="keyword">return</span> <span class="string">"Hi there"</span>&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Customer 对象 "</span>) </span><br><span class="line"><span class="built_in">console</span>.log(customer.firstName) </span><br><span class="line"><span class="built_in">console</span>.log(customer.lastName) </span><br><span class="line"><span class="built_in">console</span>.log(customer.sayHi())  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> employee:IPerson = &#123; </span><br><span class="line">    firstName:<span class="string">"Jim"</span>,</span><br><span class="line">    lastName:<span class="string">"Blakes"</span>, </span><br><span class="line">    sayHi: ():<span class="function"><span class="params">string</span> =&gt;</span>&#123;<span class="keyword">return</span> <span class="string">"Hello!!!"</span>&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Employee  对象 "</span>) </span><br><span class="line"><span class="built_in">console</span>.log(employee.firstName) </span><br><span class="line"><span class="built_in">console</span>.log(employee.lastName)</span><br></pre></td></tr></table></figure><p>需要注意接口不能转换为 JavaScript。 它只是 TypeScript 的一部分。</p><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> customer = &#123;</span><br><span class="line">    firstName: <span class="string">"Tom"</span>,</span><br><span class="line">    lastName: <span class="string">"Hanks"</span>,</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"Hi there"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Customer 对象 "</span>);</span><br><span class="line"><span class="built_in">console</span>.log(customer.firstName);</span><br><span class="line"><span class="built_in">console</span>.log(customer.lastName);</span><br><span class="line"><span class="built_in">console</span>.log(customer.sayHi());</span><br><span class="line"><span class="keyword">var</span> employee = &#123;</span><br><span class="line">    firstName: <span class="string">"Jim"</span>,</span><br><span class="line">    lastName: <span class="string">"Blakes"</span>,</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"Hello!!!"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Employee  对象 "</span>);</span><br><span class="line"><span class="built_in">console</span>.log(employee.firstName);</span><br><span class="line"><span class="built_in">console</span>.log(employee.lastName);</span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Customer 对象</span><br><span class="line">Tom</span><br><span class="line">Hanks</span><br><span class="line">Hi there</span><br><span class="line">Employee  对象</span><br><span class="line">Jim</span><br><span class="line">Blakes</span><br></pre></td></tr></table></figure><hr><h2 id="联合类型和接口"><a href="#联合类型和接口" class="headerlink" title="联合类型和接口"></a>联合类型和接口</h2><p>以下实例演示了如何在接口中使用联合类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> RunOptions &#123; </span><br><span class="line">    program:<span class="built_in">string</span>; </span><br><span class="line">    commandline:<span class="built_in">string</span>[]|<span class="built_in">string</span>|<span class="function">(<span class="params">(<span class="params"></span>)=&gt;<span class="built_in">string</span></span>); </span></span><br><span class="line"><span class="function">&#125; </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">// <span class="params">commandline</span> 是字符串</span></span><br><span class="line"><span class="function"><span class="params">var</span> <span class="params">options</span>:<span class="params">RunOptions</span> = &#123;<span class="params">program</span>:"<span class="params">test1</span>",<span class="params">commandline</span>:"<span class="params">Hello</span>"&#125;; </span></span><br><span class="line"><span class="function"><span class="params">console</span>.<span class="params">log</span>(<span class="params">options.commandline</span>)  </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">// <span class="params">commandline</span> 是字符串数组</span></span><br><span class="line"><span class="function"><span class="params">options</span> = &#123;<span class="params">program</span>:"<span class="params">test1</span>",<span class="params">commandline</span>:["<span class="params">Hello</span>","<span class="params">World</span>"]&#125;; </span></span><br><span class="line"><span class="function"><span class="params">console</span>.<span class="params">log</span>(<span class="params">options.commandline[0]</span>); </span></span><br><span class="line"><span class="function"><span class="params">console</span>.<span class="params">log</span>(<span class="params">options.commandline[1]</span>);  </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">// <span class="params">commandline</span> 是一个函数表达式</span></span><br><span class="line"><span class="function"><span class="params">options</span> = &#123;<span class="params">program</span>:"<span class="params">test1</span>",<span class="params">commandline</span>:<span class="params">()</span>=&gt;</span>&#123;<span class="keyword">return</span> <span class="string">"**Hello World**"</span>;&#125;&#125;; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> fn:<span class="built_in">any</span> = options.commandline; </span><br><span class="line"><span class="built_in">console</span>.log(fn());</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commandline 是字符串</span></span><br><span class="line"><span class="keyword">var</span> options = &#123; <span class="attr">program</span>: <span class="string">"test1"</span>, <span class="attr">commandline</span>: <span class="string">"Hello"</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(options.commandline);</span><br><span class="line"><span class="comment">// commandline 是字符串数组</span></span><br><span class="line">options = &#123; <span class="attr">program</span>: <span class="string">"test1"</span>, <span class="attr">commandline</span>: [<span class="string">"Hello"</span>, <span class="string">"World"</span>] &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(options.commandline[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(options.commandline[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// commandline 是一个函数表达式</span></span><br><span class="line">options = &#123; <span class="attr">program</span>: <span class="string">"test1"</span>, <span class="attr">commandline</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"**Hello World**"</span>; &#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> fn = options.commandline;</span><br><span class="line"><span class="built_in">console</span>.log(fn());</span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">**Hello World**</span><br></pre></td></tr></table></figure><hr><h2 id="接口和数组"><a href="#接口和数组" class="headerlink" title="接口和数组"></a>接口和数组</h2><p>接口中我们可以将数组的索引值和元素设置为不同类型，索引值可以是数字或字符串。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> namelist &#123; </span><br><span class="line">   [index:<span class="built_in">number</span>]:<span class="built_in">string</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> list2:namelist = [<span class="string">"John"</span>,<span class="number">1</span>,<span class="string">"Bran"</span>] / 错误元素 <span class="number">1</span> 不是 <span class="built_in">string</span> 类型</span><br><span class="line"><span class="keyword">interface</span> ages &#123; </span><br><span class="line">   [index:<span class="built_in">string</span>]:<span class="built_in">number</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> agelist:ages; </span><br><span class="line">agelist[<span class="string">"John"</span>] = <span class="number">15</span>   <span class="comment">// 正确 </span></span><br><span class="line">agelist[<span class="number">2</span>] = <span class="string">"nine"</span>   <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><hr><h2 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h2><p>接口继承就是说接口可以通过其他接口来扩展自己。</p><p>Typescript 允许接口继承多个接口。</p><p>继承使用关键字 <code>extends</code>。</p><p>单接口继承语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Child_interface_name extends super_interface_name</span><br></pre></td></tr></table></figure><p>多接口继承语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Child_interface_name extends super_interface1_name, super_interface2_name,…,super_interfaceN_name</span><br></pre></td></tr></table></figure><p>继承的各个接口使用逗号 , 分隔。</p><hr><h2 id="单继承实例"><a href="#单继承实例" class="headerlink" title="单继承实例"></a>单继承实例</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123; </span><br><span class="line">   age:<span class="built_in">number</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> Musician <span class="keyword">extends</span> Person &#123; </span><br><span class="line">   instrument:<span class="built_in">string</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> drummer = &lt;Musician&gt;&#123;&#125;; </span><br><span class="line">drummer.age = <span class="number">27</span> </span><br><span class="line">drummer.instrument = <span class="string">"Drums"</span> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"年龄:  "</span>+drummer.age)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"喜欢的乐器:  "</span>+drummer.instrument)</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> drummer = &#123;&#125;;</span><br><span class="line">drummer.age = <span class="number">27</span>;</span><br><span class="line">drummer.instrument = <span class="string">"Drums"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"年龄:  "</span> + drummer.age);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"喜欢的乐器:  "</span> + drummer.instrument);</span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">年龄:  27</span><br><span class="line">喜欢的乐器:  Drums</span><br></pre></td></tr></table></figure><hr><h2 id="多继承实例"><a href="#多继承实例" class="headerlink" title="多继承实例"></a>多继承实例</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IParent1 &#123; </span><br><span class="line">    v1:<span class="built_in">number</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> IParent2 &#123; </span><br><span class="line">    v2:<span class="built_in">number</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> Child <span class="keyword">extends</span> IParent1, IParent2 &#123; &#125; </span><br><span class="line"><span class="keyword">var</span> Iobj:Child = &#123; v1:<span class="number">12</span>, v2:<span class="number">23</span>&#125; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"value 1: "</span>+Iobj.v1+<span class="string">" value 2: "</span>+Iobj.v2)</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Iobj = &#123; <span class="attr">v1</span>: <span class="number">12</span>, <span class="attr">v2</span>: <span class="number">23</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"value 1: "</span> + Iobj.v1 + <span class="string">" value 2: "</span> + Iobj.v2);</span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value 1: 12 value 2: 23</span><br></pre></td></tr></table></figure><hr><h1 id="TypeScript-类"><a href="#TypeScript-类" class="headerlink" title="TypeScript 类"></a>TypeScript 类</h1><p>TypeScript 是面向对象的 JavaScript。</p><p>类描述了所创建的对象共同的属性和方法。</p><p>TypeScript 支持面向对象的所有特性，比如 类、接口等。</p><p>TypeScript 类定义方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class class_name &#123; </span><br><span class="line">    &#x2F;&#x2F; 类作用域</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义类的关键字为 class，后面紧跟类名，类可以包含以下几个模块（类的数据成员）：</p><ul><li><p><strong>字段</strong> − 字段是类里面声明的变量。字段表示对象的有关数据。</p></li><li><p><strong>构造函数</strong> − 类实例化时调用，可以为类的对象分配内存。</p></li><li><p><strong>方法</strong> − 方法为对象要执行的操作。</p></li></ul><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>创建一个 Person 类：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Person;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><hr><h2 id="创建类的数据成员"><a href="#创建类的数据成员" class="headerlink" title="创建类的数据成员"></a>创建类的数据成员</h2><p>以下实例我们声明了类 Car，包含字段为 engine，构造函数在类实例化后初始化字段 engine。</p><p>this 关键字表示当前类实例化的对象。注意构造函数的参数名与字段名相同，this.engine 表示类的字段。</p><p>此外我们也在类中定义了一个方法 disp()。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Car &#123; </span><br><span class="line">    <span class="comment">// 字段 </span></span><br><span class="line">    engine:<span class="built_in">string</span>; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 构造函数 </span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">engine:<span class="built_in">string</span></span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.engine = engine </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 方法 </span></span><br><span class="line">    disp():<span class="built_in">void</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"发动机为 :   "</span>+<span class="keyword">this</span>.engine) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数 </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">engine</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法 </span></span><br><span class="line">    Car.prototype.disp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"发动机为 :   "</span> + <span class="keyword">this</span>.engine);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Car;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><hr><h2 id="创建实例化对象"><a href="#创建实例化对象" class="headerlink" title="创建实例化对象"></a>创建实例化对象</h2><p>我们使用 new 关键字来实例化类的对象，语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var object_name &#x3D; new class_name([ arguments ])</span><br></pre></td></tr></table></figure><p>类实例化时会调用构造函数，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; new Car(&quot;Engine 1&quot;)</span><br></pre></td></tr></table></figure><p>类中的字段属性和方法可以使用 . 号来访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 访问属性</span><br><span class="line">obj.field_name </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 访问方法</span><br><span class="line">obj.function_name()</span><br></pre></td></tr></table></figure><h2 id="完整实例"><a href="#完整实例" class="headerlink" title="完整实例"></a>完整实例</h2><p>以下实例创建来一个 Car 类，然后通过关键字 new 来创建一个对象并访问属性和方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Car &#123; </span><br><span class="line">   <span class="comment">// 字段</span></span><br><span class="line">   engine:<span class="built_in">string</span>; </span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 构造函数</span></span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params">engine:<span class="built_in">string</span></span>) &#123; </span><br><span class="line">      <span class="keyword">this</span>.engine = engine </span><br><span class="line">   &#125;  </span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 方法</span></span><br><span class="line">   disp():<span class="built_in">void</span> &#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"函数中显示发动机型号  :   "</span>+<span class="keyword">this</span>.engine) </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Car(<span class="string">"XXSY1"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 访问字段</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"读取发动机型号 :  "</span>+obj.engine)  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 访问方法</span></span><br><span class="line">obj.disp()</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">engine</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    Car.prototype.disp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"函数中显示发动机型号  :   "</span> + <span class="keyword">this</span>.engine);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Car;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="comment">// 创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Car(<span class="string">"XXSY1"</span>);</span><br><span class="line"><span class="comment">// 访问字段</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"读取发动机型号 :  "</span> + obj.engine);</span><br><span class="line"><span class="comment">// 访问方法</span></span><br><span class="line">obj.disp();</span><br></pre></td></tr></table></figure><p>输出结果为：：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">读取发动机型号 :  XXSY1</span><br><span class="line">函数中显示发动机型号  :   XXSY1</span><br></pre></td></tr></table></figure><hr><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>TypeScript 支持继承类，即我们可以在创建类的时候继承一个已存在的类，这个已存在的类称为父类，继承它的类称为子类。</p><p>类继承使用关键字 <code>extends</code>，子类除了不能继承父类的私有成员(方法和属性)和构造函数，其他的都可以继承。</p><p>TypeScript 一次只能继承一个类，不支持继承多个类，但 TypeScript 支持多重继承（A 继承 B，B 继承 C）。</p><p>语法格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class child_class_name extends parent_class_name</span><br></pre></td></tr></table></figure><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>类的继承：实例中创建了 Shape 类，Circle 类继承了 Shape 类，Circle 类可以直接使用 Area 属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Shape &#123; </span><br><span class="line">   Area:<span class="built_in">number</span> </span><br><span class="line">   </span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params">a:<span class="built_in">number</span></span>) &#123; </span><br><span class="line">      <span class="keyword">this</span>.Area = a </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> Circle <span class="keyword">extends</span> Shape &#123; </span><br><span class="line">   disp():<span class="built_in">void</span> &#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"圆的面积:  "</span>+<span class="keyword">this</span>.Area) </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Circle(<span class="number">223</span>); </span><br><span class="line">obj.disp()</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __extends = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__extends) || (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> extendStatics = <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">        extendStatics = <span class="built_in">Object</span>.setPrototypeOf ||</span><br><span class="line">            (&#123; <span class="attr">__proto__</span>: [] &#125; <span class="keyword">instanceof</span> <span class="built_in">Array</span> &amp;&amp; <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123; d.__proto__ = b; &#125;) ||</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123; <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b) <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p]; &#125;;</span><br><span class="line">        <span class="keyword">return</span> extendStatics(d, b);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">        extendStatics(d, b);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">        d.prototype = b === <span class="literal">null</span> ? <span class="built_in">Object</span>.create(b) : (__.prototype = b.prototype, <span class="keyword">new</span> __());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> Shape = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Area = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Shape;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> Circle = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params">_super</span>) </span>&#123;</span><br><span class="line">    __extends(Circle, _super);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _super !== <span class="literal">null</span> &amp;&amp; _super.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) || <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Circle.prototype.disp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"圆的面积:  "</span> + <span class="keyword">this</span>.Area);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Circle;</span><br><span class="line">&#125;(Shape));</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Circle(<span class="number">223</span>);</span><br><span class="line">obj.disp();</span><br></pre></td></tr></table></figure><p>输出结果为：：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">圆的面积:  223</span><br></pre></td></tr></table></figure><p>需要注意的是子类只能继承一个父类，TypeScript 不支持继承多个类，但支持多重继承，如下实例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Root &#123; </span><br><span class="line">   str:<span class="built_in">string</span>; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Root &#123;&#125; </span><br><span class="line"><span class="keyword">class</span> Leaf <span class="keyword">extends</span> Child &#123;&#125; <span class="comment">// 多重继承，继承了 Child 和 Root 类</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Leaf(); </span><br><span class="line">obj.str =<span class="string">"hello"</span> </span><br><span class="line"><span class="built_in">console</span>.log(obj.str)</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __extends = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__extends) || (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> extendStatics = <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">        extendStatics = <span class="built_in">Object</span>.setPrototypeOf ||</span><br><span class="line">            (&#123; <span class="attr">__proto__</span>: [] &#125; <span class="keyword">instanceof</span> <span class="built_in">Array</span> &amp;&amp; <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123; d.__proto__ = b; &#125;) ||</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123; <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b) <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p]; &#125;;</span><br><span class="line">        <span class="keyword">return</span> extendStatics(d, b);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">        extendStatics(d, b);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">        d.prototype = b === <span class="literal">null</span> ? <span class="built_in">Object</span>.create(b) : (__.prototype = b.prototype, <span class="keyword">new</span> __());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> Root = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Root</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Root;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> Child = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params">_super</span>) </span>&#123;</span><br><span class="line">    __extends(Child, _super);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _super !== <span class="literal">null</span> &amp;&amp; _super.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) || <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Child;</span><br><span class="line">&#125;(Root));</span><br><span class="line"><span class="keyword">var</span> Leaf = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params">_super</span>) </span>&#123;</span><br><span class="line">    __extends(Leaf, _super);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Leaf</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _super !== <span class="literal">null</span> &amp;&amp; _super.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) || <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Leaf;</span><br><span class="line">&#125;(Child)); <span class="comment">// 多重继承，继承了 Child 和 Root 类</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Leaf();</span><br><span class="line">obj.str = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.str);</span><br></pre></td></tr></table></figure><p>输出结果为：：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure><hr><h2 id="继承类的方法重写"><a href="#继承类的方法重写" class="headerlink" title="继承类的方法重写"></a>继承类的方法重写</h2><p>类继承后，子类可以对父类的方法重新定义，这个过程称之为方法的重写。</p><p>其中 super 关键字是对父类的直接引用，该关键字可以引用父类的属性和方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> PrinterClass &#123; </span><br><span class="line">   doPrint():<span class="built_in">void</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"父类的 doPrint() 方法。"</span>) </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> StringPrinter <span class="keyword">extends</span> PrinterClass &#123; </span><br><span class="line">   doPrint():<span class="built_in">void</span> &#123; </span><br><span class="line">      <span class="keyword">super</span>.doPrint() <span class="comment">// 调用父类的函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"子类的 doPrint()方法。"</span>)</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> StringPrinter() </span><br><span class="line">obj.doPrint()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> __extends = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__extends) || (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> extendStatics = <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">        extendStatics = <span class="built_in">Object</span>.setPrototypeOf ||</span><br><span class="line">            (&#123; <span class="attr">__proto__</span>: [] &#125; <span class="keyword">instanceof</span> <span class="built_in">Array</span> &amp;&amp; <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123; d.__proto__ = b; &#125;) ||</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123; <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b) <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p]; &#125;;</span><br><span class="line">        <span class="keyword">return</span> extendStatics(d, b);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">        extendStatics(d, b);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">        d.prototype = b === <span class="literal">null</span> ? <span class="built_in">Object</span>.create(b) : (__.prototype = b.prototype, <span class="keyword">new</span> __());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> PrinterClass = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">PrinterClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    PrinterClass.prototype.doPrint = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"父类的 doPrint() 方法。"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> PrinterClass;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> StringPrinter = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params">_super</span>) </span>&#123;</span><br><span class="line">    __extends(StringPrinter, _super);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">StringPrinter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _super !== <span class="literal">null</span> &amp;&amp; _super.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) || <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    StringPrinter.prototype.doPrint = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        _super.prototype.doPrint.call(<span class="keyword">this</span>); <span class="comment">// 调用父类的函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"子类的 doPrint()方法。"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> StringPrinter;</span><br><span class="line">&#125;(PrinterClass));</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> StringPrinter();</span><br><span class="line">obj.doPrint();</span><br></pre></td></tr></table></figure><p>输出结果为：：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父类的 doPrint() 方法。</span><br><span class="line">子类的 doPrint()方法。</span><br></pre></td></tr></table></figure><hr><h2 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h2><p>static 关键字用于定义类的数据成员（属性和方法）为静态的，静态成员可以直接通过类名调用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> StaticMem &#123;  </span><br><span class="line">   <span class="keyword">static</span> num:<span class="built_in">number</span>; </span><br><span class="line">   </span><br><span class="line">   <span class="keyword">static</span> disp():<span class="built_in">void</span> &#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"num 值为 "</span>+ StaticMem.num) </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">StaticMem.num = <span class="number">12</span>     <span class="comment">// 初始化静态变量</span></span><br><span class="line">StaticMem.disp()       <span class="comment">// 调用静态方法</span></span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> StaticMem = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">StaticMem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    StaticMem.disp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"num 值为 "</span> + StaticMem.num);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> StaticMem;</span><br><span class="line">&#125;());</span><br><span class="line">StaticMem.num = <span class="number">12</span>; <span class="comment">// 初始化静态变量</span></span><br><span class="line">StaticMem.disp(); <span class="comment">// 调用静态方法</span></span><br></pre></td></tr></table></figure><p>输出结果为：：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num 值为 12</span><br></pre></td></tr></table></figure><hr><h2 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h2><p>instanceof 运算符用于判断对象是否是指定的类型，如果是返回 true，否则返回 false。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&#123; &#125; </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person() </span><br><span class="line"><span class="keyword">var</span> isPerson = obj <span class="keyword">instanceof</span> Person; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj 对象是 Person 类实例化来的吗？ "</span> + isPerson);</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Person;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> isPerson = obj <span class="keyword">instanceof</span> Person;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">" obj 对象是 Person 类实例化来的吗？ "</span> + isPerson);</span><br></pre></td></tr></table></figure><p>输出结果为：：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj 对象是 Person 类实例化来的吗？ true</span><br></pre></td></tr></table></figure><hr><h2 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h2><p>TypeScript 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。TypeScript 支持 3 种不同的访问权限。</p><ul><li><p>public（默认） : 公有，可以在任何地方被访问。</p></li><li><p>protected : 受保护，可以被其自身以及其子类和父类访问。</p></li><li><p>private : 私有，只能被其定义所在的类访问。</p></li></ul><p>以下实例定义了两个变量 str1 和 str2，str1 为 public，str2 为 private，实例化后可以访问 str1，如果要访问 str2 则会编译错误。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Encapsulate &#123; </span><br><span class="line">   str1:<span class="built_in">string</span> = <span class="string">"hello"</span> </span><br><span class="line">   <span class="keyword">private</span> str2:<span class="built_in">string</span> = <span class="string">"world"</span> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Encapsulate() </span><br><span class="line"><span class="built_in">console</span>.log(obj.str1)     <span class="comment">// 可访问 </span></span><br><span class="line"><span class="built_in">console</span>.log(obj.str2)   <span class="comment">// 编译错误， str2 是私有的</span></span><br></pre></td></tr></table></figure><h2 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h2><p>类可以实现接口，使用关键字 implements，并将 interest 字段作为类的属性使用。</p><p>以下实例红 AgriLoan 类实现了 ILoan 接口：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ILoan &#123; </span><br><span class="line">   interest:<span class="built_in">number</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> AgriLoan <span class="keyword">implements</span> ILoan &#123; </span><br><span class="line">   interest:<span class="built_in">number</span> </span><br><span class="line">   rebate:<span class="built_in">number</span> </span><br><span class="line">   </span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params">interest:<span class="built_in">number</span>,rebate:<span class="built_in">number</span></span>) &#123; </span><br><span class="line">      <span class="keyword">this</span>.interest = interest </span><br><span class="line">      <span class="keyword">this</span>.rebate = rebate </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> AgriLoan(<span class="number">10</span>,<span class="number">1</span>) </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"利润为 : "</span>+obj.interest+<span class="string">"，抽成为 : "</span>+obj.rebate )</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AgriLoan = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">AgriLoan</span>(<span class="params">interest, rebate</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.interest = interest;</span><br><span class="line">        <span class="keyword">this</span>.rebate = rebate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> AgriLoan;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> AgriLoan(<span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"利润为 : "</span> + obj.interest + <span class="string">"，抽成为 : "</span> + obj.rebate);</span><br></pre></td></tr></table></figure><p>输出结果为：：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利润为 : 10，抽成为 : 1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      TypeScript 是 JavaScript 的一个超集，支持 ECMAScript 6 标准。 TypeScript 设计目标是开发大型应用，它可以编译成纯 JavaScript，编译出来的 JavaScript 可以运行在任何浏览器上。
    
    </summary>
    
    
      <category term="javascript" scheme="https://SmileLJZ.github.io/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://SmileLJZ.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="https://SmileLJZ.github.io/tags/javascript/"/>
    
      <category term="TypeScript" scheme="https://SmileLJZ.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript（3）</title>
    <link href="https://smileljz.github.io/2020/07/12/TypeScript%EF%BC%883%EF%BC%89/"/>
    <id>https://smileljz.github.io/2020/07/12/TypeScript%EF%BC%883%EF%BC%89/</id>
    <published>2020-07-12T14:13:40.000Z</published>
    <updated>2020-07-13T17:16:16.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript-循环"><a href="#TypeScript-循环" class="headerlink" title="TypeScript 循环"></a>TypeScript 循环</h1><p>有的时候，我们可能需要多次执行同一块代码。一般情况下，语句是按顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。</p><p>编程语言提供了更为复杂执行路径的多种控制结构。</p><p>循环语句允许我们多次执行一个语句或语句组，下面是大多数编程语言中循环语句的流程图：</p><p><img src= "/img/loading.gif" data-src="https://www.runoob.com/wp-content/uploads/2015/12/loop.png" alt></p><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>TypeScript for 循环用于多次执行一个语句序列，简化管理循环变量的代码。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>语法格式如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for ( init; condition; increment )&#123;</span><br><span class="line">    statement(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 for 循环的控制流程解析：</p><ol><li>init 会首先被执行，且只会执行一次。这一步允许您声明并初始化任何循环控制变量。您也可以不在这里写任何语句，只要有一个分号出现即可。</li><li>接下来，会判断 condition。如果为 true，则执行循环主体。如果为 false，则不执行循环主体，且控制流会跳转到紧接着 for 循环的下一条语句。</li><li>在执行完 for 循环主体后，控制流会跳回上面的 increment 语句。该语句允许您更新循环控制变量。该语句可以留空，只要在条件后有一个分号出现即可。</li><li>条件再次被判断。如果为 true，则执行循环，这个过程会不断重复（循环主体，然后增加步值，再然后重新判断条件）。在条件变为 false 时，for 循环终止。</li></ol><p>在这里，statement(s) 可以是一个单独的语句，也可以是几个语句组成的代码块。</p><p>condition 可以是任意的表达式，当条件为 true 时执行循环，当条件为 false 时，退出循环。</p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src= "/img/loading.gif" data-src="https://www.runoob.com/wp-content/uploads/2014/09/cpp_for_loop.png" alt></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下实例计算 5 的阶乘， for 循环生成从 5 到 1 的数字，并计算每次循环数字的乘积。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num:<span class="built_in">number</span> = <span class="number">5</span>; </span><br><span class="line"><span class="keyword">var</span> i:<span class="built_in">number</span>; </span><br><span class="line"><span class="keyword">var</span> factorial = <span class="number">1</span>; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(i = num;i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line">   factorial *= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(factorial)</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">var</span> factorial = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = num; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">    factorial *= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(factorial);</span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><blockquote><p>120</p></blockquote><h2 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h2><p>for…of 语句创建一个循环来迭代可迭代的对象。在 ES6 中引入的 for…of 循环，以替代 for…in 和 forEach() ，并支持新的迭代协议。for…of 允许你遍历 Arrays（数组）, Strings（字符串）, Maps（映射）, Sets（集合）等可迭代的数据结构等。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someArray = [<span class="number">1</span>, <span class="string">"string"</span>, <span class="literal">false</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry of someArray) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(entry); <span class="comment">// 1, "string", false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="forEach、every-和-some-循环"><a href="#forEach、every-和-some-循环" class="headerlink" title="forEach、every 和 some 循环"></a>forEach、every 和 some 循环</h2><p>forEach、every 和 some 是 JavaScript 的循环语法，TypeScript 作为 JavaScript 的语法超集，当然默认也是支持的。</p><p>因为 forEach 在 iteration 中是无法返回的，所以可以使用 every 和 some 来取代 forEach。</p><h3 id="forEach-循环实例"><a href="#forEach-循环实例" class="headerlink" title="forEach 循环实例"></a>forEach 循环实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">list.forEach(<span class="function">(<span class="params">val, idx, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// val: 当前值</span></span><br><span class="line">    <span class="comment">// idx：当前index</span></span><br><span class="line">    <span class="comment">// array: Array</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="forEach-every-循环"><a href="#forEach-every-循环" class="headerlink" title="forEach every 循环"></a>forEach every 循环</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">list.every(<span class="function">(<span class="params">val, idx, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// val: 当前值</span></span><br><span class="line">    <span class="comment">// idx：当前index</span></span><br><span class="line">    <span class="comment">// array: Array</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// Continues</span></span><br><span class="line">    <span class="comment">// Return false will quit the iteration</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="TypeScript-函数"><a href="#TypeScript-函数" class="headerlink" title="TypeScript 函数"></a>TypeScript 函数</h1><p>函数是一组一起执行一个任务的语句。</p><p>您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。</p><p>函数声明告诉编译器函数的名称、返回类型和参数。函数定义提供了函数的实际主体。</p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>函数就是包裹在花括号中的代码块，前面使用了关键词 function：</p><p>语法格式如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function function_name()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 执行代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   </span><br><span class="line">    <span class="comment">// 函数定义</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"调用函数"</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>函数只有通过调用才可以执行函数内的代码。</p><p>语法格式如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function_name()</span><br></pre></td></tr></table></figure><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;   <span class="comment">// 函数定义</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"调用函数"</span>) </span><br><span class="line">&#125; </span><br><span class="line">test()              <span class="comment">// 调用函数</span></span><br></pre></td></tr></table></figure><h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><p>有时，我们会希望函数将执行的结果返回到调用它的地方。</p><p>通过使用 return 语句就可以实现。</p><p>在使用 return 语句时，函数会停止执行，并返回指定的值。</p><p>语法格式如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function function_name():return_type &#123; </span><br><span class="line">    &#x2F;&#x2F; 语句</span><br><span class="line">    return value; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>return_type 是返回值的类型。</p></li><li><p>return 关键词后跟着要返回的结果。</p></li><li><p>一个函数只能有一个 return 语句。</p></li><li><p>返回值的类型需要与函数定义的返回类型(return_type)一致。</p></li></ul><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>):<span class="title">string</span> </span>&#123; <span class="comment">// 返回一个字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World"</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">caller</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> msg = greet() <span class="comment">// 调用 greet() 函数 </span></span><br><span class="line">    <span class="built_in">console</span>.log(msg) </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">caller()</span><br></pre></td></tr></table></figure><ul><li>实例中定义了函数 greet()，返回值的类型为 string。</li><li>greet() 函数通过 return 语句返回给调用它的地方，即变量 msg，之后输出该返回值。</li></ul><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">caller</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> msg = greet(); <span class="comment">// 调用 greet() 函数 </span></span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">caller();</span><br></pre></td></tr></table></figure><h2 id="带参数函数"><a href="#带参数函数" class="headerlink" title="带参数函数"></a>带参数函数</h2><p>在调用函数时，您可以向其传递值，这些值被称为参数。</p><p>这些参数可以在函数中使用。</p><p>您可以向函数发送多个参数，每个参数使用逗号 , 分隔：</p><p>语法格式如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function func_name( param1 [:datatype], param2 [:datatype]) &#123;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>param1、param2 为参数名。</p></li><li><p>datatype 为参数类型。</p></li></ul><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><ul><li>实例中定义了函数 add()，返回值的类型为 number。</li><li>add() 函数中定义了两个 number 类型的参数，函数内将两个参数相加并返回。</li></ul><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>3</p></blockquote><h2 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h2><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>在 TypeScript 函数里，如果我们定义了参数，则我们必须传入这些参数，除非将这些参数设置为可选，可选参数使用问号标识 ？。</p><h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>);                  <span class="comment">// 错误，缺少参数</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// 错误，参数太多了</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);         <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><p>以下实例，我么将 lastName 设置为可选参数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName)</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>);  <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// 错误，参数太多了</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);  <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><p>可选参数必须跟在必需参数后面。 如果上例我们想让 firstName 是可选的，lastName 必选，那么就要调整它们的位置，把 firstName 放在后面。</p><p>如果都是可选参数就没关系。</p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>我们也可以设置参数的默认值，这样在调用函数的时候，如果不传入该参数的值，则使用默认参数，语法格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function function_name(param1[:type],param2[:type] &#x3D; default_value) &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：参数不能同时设置为可选和默认。</p><h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><p>以下实例函数的参数 rate 设置了默认值为 0.50，调用该函数时如果未传入参数则使用该默认值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate_discount</span>(<span class="params">price:<span class="built_in">number</span>,rate:<span class="built_in">number</span> = 0.50</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> discount = price * rate; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"计算结果: "</span>,discount); </span><br><span class="line">&#125; </span><br><span class="line">calculate_discount(<span class="number">1000</span>) </span><br><span class="line">calculate_discount(<span class="number">1000</span>,<span class="number">0.30</span>)</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate_discount</span>(<span class="params">price, rate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rate === <span class="keyword">void</span> <span class="number">0</span>) &#123; rate = <span class="number">0.50</span>; &#125;</span><br><span class="line">    <span class="keyword">var</span> discount = price * rate;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"计算结果: "</span>, discount);</span><br><span class="line">&#125;</span><br><span class="line">calculate_discount(<span class="number">1000</span>);</span><br><span class="line">calculate_discount(<span class="number">1000</span>, <span class="number">0.30</span>);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">计算结果:  500</span><br><span class="line">计算结果:  300</span><br></pre></td></tr></table></figure><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p>有一种情况，我们不知道要向函数传入多少个参数，这时候我们就可以使用剩余参数来定义。</p><p>剩余参数语法允许我们将一个不确定数量的参数作为一个数组传入。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + restOfName.join(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> employeeName = buildName(<span class="string">"Joseph"</span>, <span class="string">"Samuel"</span>, <span class="string">"Lucas"</span>, <span class="string">"MacKinzie"</span>);</span><br></pre></td></tr></table></figure><p>函数的最后一个命名参数 restOfName 以 … 为前缀，它将成为一个由剩余参数组成的数组，索引值从0（包括）到 restOfName.length（不包括）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNumbers</span>(<span class="params">...nums:<span class="built_in">number</span>[]</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> i;   </span><br><span class="line">    <span class="keyword">var</span> sum:<span class="built_in">number</span> = <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;nums.length;i++) &#123; </span><br><span class="line">       sum = sum + nums[i]; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"和为："</span>,sum) </span><br><span class="line"> &#125; </span><br><span class="line"> addNumbers(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) </span><br><span class="line"> addNumbers(<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNumbers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nums = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> _i = <span class="number">0</span>; _i &lt; <span class="built_in">arguments</span>.length; _i++) &#123;</span><br><span class="line">        nums[_i] = <span class="built_in">arguments</span>[_i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        sum = sum + nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"和为："</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line">addNumbers(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">addNumbers(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">和为： 6</span><br><span class="line">和为： 50</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>匿名函数是一个没有函数名的函数。</p><p>匿名函数在程序运行时动态声明，除了没有函数名外，其他的与标准函数一样。</p><p>我们可以将匿名函数赋值给一个变量，这种表达式就成为函数表达式。</p><p>语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var res &#x3D; function( [arguments] ) &#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>不带参数匿名函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span>;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(msg())</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(msg());</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><p>带参数匿名函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="function"><span class="keyword">function</span>(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a*b;  </span><br><span class="line">&#125;; </span><br><span class="line"><span class="built_in">console</span>.log(res(<span class="number">12</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(res(<span class="number">12</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24</span><br></pre></td></tr></table></figure><h3 id="匿名函数自调用"><a href="#匿名函数自调用" class="headerlink" title="匿名函数自调用"></a>匿名函数自调用</h3><p>匿名函数自调用在函数后使用 () 即可：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">"Hello!!"</span>;   </span><br><span class="line">    <span class="built_in">console</span>.log(x)     </span><br><span class="line"> &#125;)()</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">"Hello!!"</span>;   </span><br><span class="line">    <span class="built_in">console</span>.log(x)    </span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello!!</span><br></pre></td></tr></table></figure><hr><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>TypeScript 也支持使用 JavaScript 内置的构造函数 Function() 来定义函数：</p><p>语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var res &#x3D; new Function( [arguments] ) &#123; ... &#125;)</span><br></pre></td></tr></table></figure><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"return a * b"</span>); </span><br><span class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>); </span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"return a * b"</span>); </span><br><span class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>); </span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><hr><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>递归函数即在函数内调用函数本身。</p><blockquote><p>举个例子：<br><br>从前有座山，山里有座庙，庙里有个老和尚，正在给&gt; 小和尚讲故事呢！故事是什么呢？”从前有座山，山&gt; 里有座庙，庙里有个老和尚，正在给小和尚讲故事&gt; &gt; 呢！故事是什么呢？’从前有座山，山里有座庙，庙&gt; 里有个老和尚，正在给小和尚讲故事呢！故事是什么&gt; 呢？……’”</p></blockquote><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params"><span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">number</span> &lt;= <span class="number">0</span>) &#123;         <span class="comment">// 停止执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;     </span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">number</span> * factorial(<span class="built_in">number</span> - <span class="number">1</span>));     <span class="comment">// 调用自身</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="built_in">console</span>.log(factorial(<span class="number">6</span>));      <span class="comment">// 输出 720</span></span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number &lt;= <span class="number">0</span>) &#123; <span class="comment">// 停止执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (number * factorial(number - <span class="number">1</span>)); <span class="comment">// 调用自身</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="built_in">console</span>.log(factorial(<span class="number">6</span>)); <span class="comment">// 输出 720</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">720</span><br></pre></td></tr></table></figure><hr><h2 id="Lambda-函数"><a href="#Lambda-函数" class="headerlink" title="Lambda 函数"></a>Lambda 函数</h2><p>Lambda 函数也称之为箭头函数。</p><p>箭头函数表达式的语法比函数表达式更短。</p><p>函数只有一行语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( [param1, parma2,…param n] )&#x3D;&gt;statement;</span><br></pre></td></tr></table></figure><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>以下实例声明了 lambda 表达式函数，函数返回两个数的和：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function">(<span class="params">x:<span class="built_in">number</span></span>)=&gt;</span><span class="number">10</span> + x </span><br><span class="line"><span class="built_in">console</span>.log(foo(<span class="number">100</span>))      <span class="comment">//输出结果为 110</span></span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> <span class="number">10</span> + x; &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo(<span class="number">100</span>)); <span class="comment">//输出结果为 110</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">110</span><br></pre></td></tr></table></figure><p>函数是一个语句块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">( [param1, parma2,…param n] )&#x3D;&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><p>以下实例声明了 lambda 表达式函数，函数返回两个数的和：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function">(<span class="params">x:<span class="built_in">number</span></span>)=&gt;</span> &#123;    </span><br><span class="line">    x = <span class="number">10</span> + x </span><br><span class="line">    <span class="built_in">console</span>.log(x)  </span><br><span class="line">&#125; </span><br><span class="line">foo(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    x = <span class="number">10</span> + x;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;;</span><br><span class="line">foo(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">110</span><br></pre></td></tr></table></figure><p>我们可以不指定函数的参数类型，通过函数内来推断参数类型:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function">(<span class="params">x</span>)=&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> x==<span class="string">"number"</span>) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(x+<span class="string">" 是一个数字"</span>) </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> x==<span class="string">"string"</span>) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(x+<span class="string">" 是一个字符串"</span>) </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line">func(<span class="number">12</span>) </span><br><span class="line">func(<span class="string">"Tom"</span>)</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"number"</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x + <span class="string">" 是一个数字"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x + <span class="string">" 是一个字符串"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">func(<span class="number">12</span>);</span><br><span class="line">func(<span class="string">"Tom"</span>);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12 是一个数字</span><br><span class="line">Tom 是一个字符串</span><br></pre></td></tr></table></figure><p>单个参数 () 是可选的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> display = <span class="function"><span class="params">x</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"输出为 "</span>+x) </span><br><span class="line">&#125; </span><br><span class="line">display(<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> display = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"输出为 "</span> + x);</span><br><span class="line">&#125;;</span><br><span class="line">display(<span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出为 12</span><br></pre></td></tr></table></figure><p>无参数时可以设置空括号：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> disp =<span class="function"><span class="params">()</span>=&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Function invoked"</span>); </span><br><span class="line">&#125; </span><br><span class="line">disp();</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> disp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"调用函数"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">disp();</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">调用函数</span><br></pre></td></tr></table></figure><hr><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</p><p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p><p>参数类型不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function disp(string):void; </span><br><span class="line">function disp(number):void;</span><br></pre></td></tr></table></figure><p>参数数量不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function disp(n1:number):void; </span><br><span class="line">function disp(x:number,y:number):void;</span><br></pre></td></tr></table></figure><p>参数类型顺序不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function disp(n1:number,s1:string):void; </span><br><span class="line">function disp(s:string,n:number):void;</span><br></pre></td></tr></table></figure><p>如果参数类型不同，则参数类型应设置为 any。</p><p>参数数量不同你可以将不同的参数设置为可选。</p><h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><p>以下实例定义了参数类型与参数数量不同：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params">s1:<span class="built_in">string</span></span>):<span class="title">void</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params">n1:<span class="built_in">number</span>,s1:<span class="built_in">string</span></span>):<span class="title">void</span></span>; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params">x:<span class="built_in">any</span>,y?:<span class="built_in">any</span></span>):<span class="title">void</span> </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(x); </span><br><span class="line">    <span class="built_in">console</span>.log(y); </span><br><span class="line">&#125; </span><br><span class="line">disp(<span class="string">"abc"</span>) </span><br><span class="line">disp(<span class="number">1</span>,<span class="string">"xyz"</span>);</span><br></pre></td></tr></table></figure><p>编译以上代码，得到以下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line">disp(<span class="string">"abc"</span>);</span><br><span class="line">disp(<span class="number">1</span>, <span class="string">"xyz"</span>);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br><span class="line">undefined</span><br><span class="line">1</span><br><span class="line">xyz</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      TypeScript 是 JavaScript 的一个超集，支持 ECMAScript 6 标准。 TypeScript 设计目标是开发大型应用，它可以编译成纯 JavaScript，编译出来的 JavaScript 可以运行在任何浏览器上。
    
    </summary>
    
    
      <category term="javascript" scheme="https://SmileLJZ.github.io/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://SmileLJZ.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="https://SmileLJZ.github.io/tags/javascript/"/>
    
      <category term="TypeScript" scheme="https://SmileLJZ.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript2</title>
    <link href="https://smileljz.github.io/2020/07/12/TypeScript%EF%BC%882%EF%BC%89/"/>
    <id>https://smileljz.github.io/2020/07/12/TypeScript%EF%BC%882%EF%BC%89/</id>
    <published>2020-07-12T13:49:27.000Z</published>
    <updated>2020-07-12T14:14:55.708Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="TypeScript-运算符"><a href="#TypeScript-运算符" class="headerlink" title="TypeScript 运算符"></a>TypeScript 运算符</h1><p>运算符用于执行程序代码运算，会针对一个以上操作数项目来进行运算。</p><p>考虑以下计算：</p><blockquote><p>7 + 5 = 12<br>以上实例中 7、5 和 12 是操作数。</p></blockquote><p>运算符 <code>+</code> 用于加值。</p><p>运算符 <code>=</code> 用于赋值。</p><p>TypeScript 主要包含以下几种运算：</p><ul><li>算术运算符</li><li>逻辑运算符</li><li>关系运算符</li><li>按位运算符</li><li>赋值运算符</li><li>三元/条件运算符</li><li>字符串运算符</li><li>类型运算符</li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>假定 <strong>y=5</strong> ，下面的表格解释了这些算术运算符的操作：</p><table><thead><tr><th>运算符</th><th align="center">描述</th><th align="left">例子</th><th align="left">x 运算结果</th><th align="left">y 运算结果</th></tr></thead><tbody><tr><td>+</td><td align="center">加法</td><td align="left">x=y+2</td><td align="left">7</td><td align="left">5</td></tr><tr><td>-</td><td align="center">减法</td><td align="left">x=y-2</td><td align="left">3</td><td align="left">5</td></tr><tr><td>*</td><td align="center">乘法</td><td align="left">x=y*2</td><td align="left">10</td><td align="left">5</td></tr><tr><td>/</td><td align="center">除法</td><td align="left">x=y/2</td><td align="left">2.5</td><td align="left">5</td></tr><tr><td>%</td><td align="center">取模（余数）</td><td align="left">x=y%2</td><td align="left">1</td><td align="left">5</td></tr><tr><td>+</td><td align="center">加法</td><td align="left">x=y+2</td><td align="left">7</td><td align="left">5</td></tr><tr><td>++</td><td align="center">自增</td><td align="left">x=++y</td><td align="left">6</td><td align="left">6</td></tr><tr><td>++</td><td align="center">自增</td><td align="left">x=y++</td><td align="left">5</td><td align="left">6</td></tr><tr><td>–</td><td align="center">自减</td><td align="left">x=–y</td><td align="left">4</td><td align="left">4</td></tr><tr><td>–</td><td align="center">自减</td><td align="left">x=y–</td><td align="left">5</td><td align="left">4</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1:<span class="built_in">number</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> num2:<span class="built_in">number</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> res:<span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">   </span><br><span class="line">res = num1 + num2</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"加:        "</span>+res);</span><br><span class="line"></span><br><span class="line">res = num1 - num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"减: "</span>+res)</span><br><span class="line"></span><br><span class="line">res = num1*num2</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"乘:    "</span>+res)</span><br><span class="line"></span><br><span class="line">res = num1/num2</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"除:   "</span>+res)</span><br><span class="line">   </span><br><span class="line">res = num1%num2</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"余数:   "</span>+res)</span><br><span class="line"></span><br><span class="line">num1++</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 自增运算: "</span>+num1)</span><br><span class="line"></span><br><span class="line">num2--</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num2 自减运算: "</span>+num2)</span><br></pre></td></tr></table></figure><p>使用 <code>tsc</code> 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> res = <span class="number">0</span>;</span><br><span class="line">res = num1 + num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"加:        "</span> + res);</span><br><span class="line">res = num1 - num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"减: "</span> + res);</span><br><span class="line">res = num1 * num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"乘:    "</span> + res);</span><br><span class="line">res = num1 / num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"除:   "</span> + res);</span><br><span class="line">res = num1 % num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"余数:   "</span> + res);</span><br><span class="line">num1++;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 自增运算: "</span> + num1);</span><br><span class="line">num2--;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num2 自减运算: "</span> + num2);</span><br></pre></td></tr></table></figure><p>执行以上 JavaScript 代码，输出结果为：</p><blockquote><p>加:        12 <br><br>减: 8<br><br>乘:    20<br><br>除:   5<br><br>余数:   0<br><br>num1 自增运算: 11<br><br>num2 自减运算: 1<br></p></blockquote><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系运算符用于计算结果是否为 true 或者 false。</p><p>x=5，下面的表格解释了关系运算符的操作：</p><table><thead><tr><th>运算符</th><th align="left">描述</th><th align="left">比较</th><th align="left">返回值</th></tr></thead><tbody><tr><td>==</td><td align="left">等于</td><td align="left">x==8</td><td align="left">false</td></tr><tr><td>==</td><td align="left">等于</td><td align="left">x==5</td><td align="left">true</td></tr><tr><td>!=</td><td align="left">不等于</td><td align="left">x!=8</td><td align="left">true</td></tr><tr><td>&gt;</td><td align="left">大于</td><td align="left">x&gt;8</td><td align="left">false</td></tr><tr><td>&lt;</td><td align="left">小于</td><td align="left">x&lt;8</td><td align="left">true</td></tr><tr><td>&gt;=</td><td align="left">大于或等于</td><td align="left">x&gt;=8</td><td align="left">false</td></tr><tr><td>&lt;=</td><td align="left">小于或等于</td><td align="left">x&lt;=8</td><td align="left">true</td></tr></tbody></table><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1:<span class="built_in">number</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> num2:<span class="built_in">number</span> = <span class="number">9</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 的值为: "</span>+num1); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num2 的值为:"</span>+num2);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> res = num1&gt;num2 </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 大于n num2: "</span>+res)</span><br><span class="line"> </span><br><span class="line">res = num1&lt;num2 </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 小于 num2: "</span>+res)  </span><br><span class="line"> </span><br><span class="line">res = num1&gt;=num2 </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 大于或等于  num2: "</span>+res)</span><br><span class="line"> </span><br><span class="line">res = num1&lt;=num2</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 小于或等于 num2: "</span>+res)  </span><br><span class="line"> </span><br><span class="line">res = num1==num2 </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 等于 num2: "</span>+res)  </span><br><span class="line"> </span><br><span class="line">res = num1!=num2  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 不等于 num2: "</span>+res)</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 的值为: "</span> + num1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num2 的值为:"</span> + num2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = num1 &gt; num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 大于n num2: "</span> + res);</span><br><span class="line"></span><br><span class="line">res = num1 &lt; num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 小于 num2: "</span> + res);</span><br><span class="line"></span><br><span class="line">res = num1 &gt;= num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 大于或等于  num2: "</span> + res);</span><br><span class="line"></span><br><span class="line">res = num1 &lt;= num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 小于或等于 num2: "</span> + res);</span><br><span class="line"></span><br><span class="line">res = num1 == num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 等于 num2: "</span> + res);</span><br><span class="line"></span><br><span class="line">res = num1 != num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1 不等于 num2: "</span> + res);</span><br></pre></td></tr></table></figure><p>执行以上 JavaScript 代码，输出结果为：</p><blockquote><p>num1 的值为: 5<br><br>num2 的值为:9<br><br>num1 大于n num2: false<br><br>num1 小于 num2: true<br><br>num1 大于或等于  num2: false<br><br>num1 小于或等于 num2: true<br><br>num1 等于 num2: false<br><br>num1 不等于 num2: true</p></blockquote><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符用于测定变量或值之间的逻辑。</p><p>给定 x=6 以及 y=3，下表解释了逻辑运算符：</p><table><thead><tr><th>运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td align="left">and</td><td align="left">(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</td></tr><tr><td>||</td><td align="left">or</td><td align="left">(x==5 || y==5) 为 false</td></tr><tr><td>!</td><td align="left">not</td><td align="left">!(x==y) 为 true</td></tr></tbody></table><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> avg:<span class="built_in">number</span> = <span class="number">20</span>; </span><br><span class="line"><span class="keyword">var</span> percentage:<span class="built_in">number</span> = <span class="number">90</span>; </span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"avg 值为: "</span>+avg+<span class="string">" ,percentage 值为: "</span>+percentage);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> res:<span class="built_in">boolean</span> = ((avg&gt;<span class="number">50</span>)&amp;&amp;(percentage&gt;<span class="number">80</span>)); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(avg&gt;50)&amp;&amp;(percentage&gt;80): "</span>,res);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> res:<span class="built_in">boolean</span> = ((avg&gt;<span class="number">50</span>)||(percentage&gt;<span class="number">80</span>)); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(avg&gt;50)||(percentage&gt;80): "</span>,res);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> res:<span class="built_in">boolean</span>=!((avg&gt;<span class="number">50</span>)&amp;&amp;(percentage&gt;<span class="number">80</span>)); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"!((avg&gt;50)&amp;&amp;(percentage&gt;80)): "</span>,res);</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> avg = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> percentage = <span class="number">90</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"avg 值为: "</span> + avg + <span class="string">" ,percentage 值为: "</span> + percentage);</span><br><span class="line"><span class="keyword">var</span> res = ((avg &gt; <span class="number">50</span>) &amp;&amp; (percentage &gt; <span class="number">80</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(avg&gt;50)&amp;&amp;(percentage&gt;80): "</span>, res);</span><br><span class="line"><span class="keyword">var</span> res = ((avg &gt; <span class="number">50</span>) || (percentage &gt; <span class="number">80</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(avg&gt;50)||(percentage&gt;80): "</span>, res);</span><br><span class="line"><span class="keyword">var</span> res = !((avg &gt; <span class="number">50</span>) &amp;&amp; (percentage &gt; <span class="number">80</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"!((avg&gt;50)&amp;&amp;(percentage&gt;80)): "</span>, res);</span><br></pre></td></tr></table></figure><p>执行以上 JavaScript 代码，输出结果为：</p><blockquote><p>avg 值为: 20 ,percentage 值为: 90 <br><br>(avg&gt;50)&amp;&amp;(percentage&gt;80):  false<br><br>(avg&gt;50)||(percentage&gt;80):  true<br><br>!((avg&gt;50)&amp;&amp;(percentage&gt;80)):  true<br></p></blockquote><h2 id="短路运算符-amp-amp-与"><a href="#短路运算符-amp-amp-与" class="headerlink" title="短路运算符(&amp;&amp; 与 ||)"></a>短路运算符(&amp;&amp; 与 ||)</h2><p>&amp;&amp; 与 || 运算符可用于组合表达式。 &amp;&amp; 运算符只有在左右两个表达式都为 true 时才返回 true。</p><p>考虑以下实例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span> </span><br><span class="line"><span class="keyword">var</span> result = ( a&lt;<span class="number">10</span> &amp;&amp; a&gt;<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>以上实例中 a &lt; 10 与 a &gt; 5 是使用了 &amp;&amp; 运算符的组合表达式，第一个表达式返回了 false，由于 &amp;&amp; 运算需要两个表达式都为 true，所以如果第一个为 false，就不再执行后面的判断(a &gt; 5 跳过计算)，直接返回 false。</p><p>|| 运算符只要其中一个表达式为 true ，则该组合表达式就会返回 true。</p><p>考虑以下实例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span> </span><br><span class="line"><span class="keyword">var</span> result = ( a&gt;<span class="number">5</span> || a&lt;<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>以上实例中 a &gt; 5 与 a &lt; 10 是使用了 || 运算符的组合表达式，第一个表达式返回了 true，由于 || 组合运算只需要一个表达式为 true，所以如果第一个为 true，就不再执行后面的判断(a &lt; 10 跳过计算)，直接返回 true。</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位操作是程序设计中对位模式按位或二进制数的一元和二元操作。</p><table><thead><tr><th>运算符</th><th align="left">描述</th><th align="left">例子</th><th align="left">类似于</th><th align="left">结果</th><th align="left">十进制</th></tr></thead><tbody><tr><td>&amp;</td><td align="left">AND，按位与处理两个长度相同的二进制数，两个相应的二进位都为 1，该位的结果值才为 1，否则为 0。</td><td align="left">x = 5 &amp; 1</td><td align="left">0101 &amp; 0001</td><td align="left">0001</td><td align="left">1</td></tr><tr><td>|</td><td align="left">OR，按位或处理两个长度相同的二进制数，两个相应的二进位中只要有一个为 1，该位的结果值为 1。</td><td align="left">x = 5 | 1</td><td align="left">0101 | 0001</td><td align="left">0101</td><td align="left">5</td></tr><tr><td>~</td><td align="left">取反，取反是一元运算符，对一个二进制数的每一位执行逻辑反操作。使数字 1 成为 0，0 成为 1。</td><td align="left">x = ~ 5</td><td align="left">~0101</td><td align="left">1010</td><td align="left">-6</td></tr><tr><td>^</td><td align="left">异或，按位异或运算，对等长二进制模式按位或二进制数的每一位执行逻辑异按位或操作。操作的结果是如果某位不同则该位为 1，否则该位为 0。</td><td align="left">x = 5 ^ 1</td><td align="left">0101 ^ 0001</td><td align="left">0100</td><td align="left">4</td></tr><tr><td>&lt;&lt;</td><td align="left">左移，把 &lt;&lt; 左边的运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数指定移动的位数，高位丢弃，低位补 0。</td><td align="left">x = 5 &lt;&lt; 1</td><td align="left">0101 &lt;&lt; 1</td><td align="left">1010</td><td align="left">10</td></tr><tr><td>&gt;&gt;</td><td align="left">右移，把 &gt;&gt; 左边的运算数的各二进位全部右移若干位，&gt;&gt; 右边的数指定移动的位数。</td><td align="left">x = 5 &gt;&gt; 1</td><td align="left">0101 &gt;&gt; 1</td><td align="left">0010</td><td align="left">2</td></tr><tr><td>&gt;&gt;&gt;</td><td align="left">无符号右移，与有符号右移位类似，除了左边一律使用0 补位。</td><td align="left">x = 2 &gt;&gt;&gt; 1</td><td align="left">0010 &gt;&gt;&gt; 1</td><td align="left">0001</td><td align="left">1</td></tr></tbody></table><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a:<span class="built_in">number</span> = <span class="number">2</span>;   <span class="comment">// 二进制 10 </span></span><br><span class="line"><span class="keyword">var</span> b:<span class="built_in">number</span> = <span class="number">3</span>;   <span class="comment">// 二进制 11</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> result; </span><br><span class="line">        </span><br><span class="line">result = (a &amp; b);     </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(a &amp; b) =&gt; "</span>,result)</span><br><span class="line">            </span><br><span class="line">result = (a | b);          </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(a | b) =&gt; "</span>,result)  </span><br><span class="line">        </span><br><span class="line">result = (a ^ b);  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(a ^ b) =&gt; "</span>,result);</span><br><span class="line">    </span><br><span class="line">result = (~b); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(~b) =&gt; "</span>,result);</span><br><span class="line"> </span><br><span class="line">result = (a &lt;&lt; b); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(a &lt;&lt; b) =&gt; "</span>,result); </span><br><span class="line"> </span><br><span class="line">result = (a &gt;&gt; b); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(a &gt;&gt; b) =&gt; "</span>,result);</span><br><span class="line"> </span><br><span class="line">result = (a &gt;&gt;&gt; <span class="number">1</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(a &gt;&gt;&gt; 1) =&gt; "</span>,result);</span><br></pre></td></tr></table></figure><p>使用 <code>tsc</code> 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>; <span class="comment">// 二进制 10 </span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>; <span class="comment">// 二进制 11</span></span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line">result = (a &amp; b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(a &amp; b) =&gt; "</span>, result);</span><br><span class="line">result = (a | b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(a | b) =&gt; "</span>, result);</span><br><span class="line">result = (a ^ b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(a ^ b) =&gt; "</span>, result);</span><br><span class="line">result = (~b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(~b) =&gt; "</span>, result);</span><br><span class="line">result = (a &lt;&lt; b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(a &lt;&lt; b) =&gt; "</span>, result);</span><br><span class="line">result = (a &gt;&gt; b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(a &gt;&gt; b) =&gt; "</span>, result);</span><br><span class="line">result = (a &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"(a &gt;&gt;&gt; 1) =&gt; "</span>, result);</span><br></pre></td></tr></table></figure><p>执行以上 JavaScript 代码，输出结果为：</p><blockquote><p>(a &amp; b) =&gt;  2<br><br>(a | b) =&gt;  3<br><br>(a ^ b) =&gt;  1<br><br>(~b) =&gt;  -4<br><br>(a &lt;&lt; b) =&gt;  16<br><br>(a &gt;&gt; b) =&gt;  0<br><br>(a &gt;&gt;&gt; 1) =&gt;  1<br></p></blockquote><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符用于给变量赋值。</p><p>给定 <strong>x=10</strong> 和 <strong>y=5</strong>，下面的表格解释了赋值运算符：</p><table><thead><tr><th>运算符</th><th align="left">例子</th><th align="left">实例</th><th align="left">x 值</th></tr></thead><tbody><tr><td>= (赋值)</td><td align="left">x = y</td><td align="left">x = y</td><td align="left">x = 5</td></tr><tr><td>+= (先进行加运算后赋值)</td><td align="left">x += y</td><td align="left">x = x + y</td><td align="left">x = 15</td></tr><tr><td>-= (先进行减运算后赋值)</td><td align="left">x -= y</td><td align="left">x = x - y</td><td align="left">x = 5</td></tr><tr><td>*= (先进行乘运算后赋值)</td><td align="left">x *= y</td><td align="left">x = x * y</td><td align="left">x = 50</td></tr><tr><td>/= (先进行除运算后赋值)</td><td align="left">x /= y</td><td align="left">x = x / y</td><td align="left">x = 2</td></tr></tbody></table><p>类似的逻辑运算符也可以与赋值运算符联合使用：&lt;&lt;=, &gt;&gt;=, &gt;&gt;=, &amp;=, |= 与 ^=。</p><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="built_in">number</span> = <span class="number">12</span> </span><br><span class="line"><span class="keyword">var</span> b:<span class="built_in">number</span> = <span class="number">10</span>  </span><br><span class="line"> </span><br><span class="line">a = b </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a = b: "</span>+a)</span><br><span class="line"> </span><br><span class="line">a += b</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a+=b: "</span>+a)</span><br><span class="line"> </span><br><span class="line">a -= b </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a-=b: "</span>+a)</span><br><span class="line"> </span><br><span class="line">a *= b </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a*=b: "</span>+a)</span><br><span class="line"> </span><br><span class="line">a /= b </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a/=b: "</span>+a)    </span><br><span class="line"> </span><br><span class="line">a %= b </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a%=b: "</span>+a)</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line">a = b;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a = b: "</span> + a);</span><br><span class="line">a += b;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a+=b: "</span> + a);</span><br><span class="line">a -= b;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a-=b: "</span> + a);</span><br><span class="line">a *= b;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a*=b: "</span> + a);</span><br><span class="line">a /= b;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a/=b: "</span> + a);</span><br><span class="line">a %= b;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a%=b: "</span> + a);</span><br></pre></td></tr></table></figure><p>执行以上 JavaScript 代码，输出结果为：</p><blockquote><p>a = b: 10<br><br>a+=b: 20<br><br>a-=b: 10<br><br>a*=b: 100<br><br>a/=b: 10<br><br>a%=b: 0<br></p></blockquote><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符 (?)"></a>三元运算符 (?)</h2><p>三元运算有 3 个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p><blockquote><p>Test ? expr1 : expr2</p></blockquote><ul><li>Test − 指定的条件语句</li><li>expr1 − 如果条件语句 Test 返回 true 则返回该值</li><li>expr2 − 如果条件语句 Test 返回 false 则返回该值</li></ul><p>让我们看下以下实例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num:<span class="built_in">number</span> = <span class="number">-2</span> </span><br><span class="line"><span class="keyword">var</span> result = num &gt; <span class="number">0</span> ? <span class="string">"大于 0"</span> : <span class="string">"小于 0，或等于 0"</span> </span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><p>实例中用于判断变量是否大于 0。</p><p>使用 tsc 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">-2</span>;</span><br><span class="line"><span class="keyword">var</span> result = num &gt; <span class="number">0</span> ? <span class="string">"大于 0"</span> : <span class="string">"小于 0，或等于 0"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><blockquote><p>小于 0，或等于 0</p></blockquote><h2 id="类型运算符"><a href="#类型运算符" class="headerlink" title="类型运算符"></a>类型运算符</h2><p><strong>typeof 运算符</strong><br>typeof 是一元运算符，返回操作数的数据类型。</p><p>查看以下实例:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">12</span> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);   <span class="comment">//输出结果: number</span></span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">//输出结果: number</span></span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><blockquote><p>number</p></blockquote><p><strong>instanceof</strong><br>instanceof 运算符用于判断对象是否为指定的类型，后面章节我们会具体介绍它。</p><h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><p><strong>负号运算符(-)</strong><br>更改操作数的符号，查看以下实例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x:<span class="built_in">number</span> = <span class="number">4</span> </span><br><span class="line"><span class="keyword">var</span> y = -x; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"x 值为: "</span>,x);   <span class="comment">// 输出结果 4 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"y 值为: "</span>,y);   <span class="comment">// 输出结果 -4</span></span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> y = -x;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"x 值为: "</span>, x); <span class="comment">// 输出结果 4 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"y 值为: "</span>, y); <span class="comment">// 输出结果 -4</span></span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><blockquote><p>x 值为:  4<br><br>y 值为:  -4</p></blockquote><p><strong>字符串运算符: 连接运算符 (+)</strong></p><p><code>+</code>运算符可以拼接两个字符串，查看以下实例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg:<span class="built_in">string</span> = <span class="string">"RUNOOB"</span>+<span class="string">".COM"</span> </span><br><span class="line"><span class="built_in">console</span>.log(msg)</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">"RUNOOB"</span> + <span class="string">".COM"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(msg);</span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><blockquote><p>RUNOOB.COM</p></blockquote><hr><h1 id="TypeScript-条件语句"><a href="#TypeScript-条件语句" class="headerlink" title="TypeScript 条件语句"></a>TypeScript 条件语句</h1><p>条件语句用于基于不同的条件来执行不同的动作。</p><p>TypeScript 条件语句是通过一条或多条语句的执行结果（True 或 False）来决定执行的代码块。</p><p>可以通过下图来简单了解条件语句的执行过程:</p><p><img src= "/img/loading.gif" data-src="https://www.runoob.com/wp-content/uploads/2016/06/decision_making.jpg" alt="&#39;条件语句的执行过程&#39;"></p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>通常在写代码时，您总是需要为不同的决定来执行不同的动作。您可以在代码中使用条件语句来完成该任务。</p><p>在 TypeScript 中，我们可使用以下条件语句：</p><ul><li><strong>if 语句</strong> - 只有当指定条件为 true 时，使用该语句来执行代码</li><li><strong>if…else 语句</strong> - 当条件为 true 时执行代码，当条件为 false 时执行其他代码</li><li><strong>if….else 语句</strong>- 使用该语句来选择多个代码块之一来执行</li><li><strong>switch 语句</strong> - 使用该语句来选择多个代码块之一来执行<h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3>TypeScript if 语句由一个布尔表达式后跟一个或多个语句组成。</li></ul><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>语法格式如下所示：</p><blockquote><p>if(boolean_expression){<br><br>    # 在布尔表达式 boolean_expression 为 true 执行<br><br>}</p></blockquote><p>如果布尔表达式 boolean_expression为 true，则 if 语句内的代码块将被执行。如果布尔表达式为 false，则 if 语句结束后的第一组代码（闭括号后）将被执行。</p><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><img src= "/img/loading.gif" data-src="https://www.runoob.com/wp-content/uploads/2014/09/if_statement.jpg" alt></p><h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  num:<span class="built_in">number</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123; </span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"数字是正数"</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"数字是正数"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><blockquote><p>数字是正数</p></blockquote><h3 id="if…else-语句"><a href="#if…else-语句" class="headerlink" title="if…else 语句"></a>if…else 语句</h3><p>一个 if 语句后可跟一个可选的 else 语句，else 语句在布尔表达式为 false 时执行。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><p>语法格式如下所示：</p><blockquote><p>if(boolean_expression){<br><br>   # 在布尔表达式 boolean_expression 为true 执行<br></p><p> }else{<br><br>   # 在布尔表达式 boolean_expression 为 false 执行<br><br>}</p></blockquote><p>如果布尔表达式 boolean_expression 为 true，则执行 if 块内的代码。如果布尔表达式为 false，则执行 else 块内的代码。</p><h4 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h4><p><img src= "/img/loading.gif" data-src="https://www.runoob.com/wp-content/uploads/2014/09/if_else_statement.jpg" alt></p><h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num:<span class="built_in">number</span> = <span class="number">12</span>; </span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">2</span>==<span class="number">0</span>) &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"偶数"</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"奇数"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"偶数"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"奇数"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><blockquote><p>偶数</p></blockquote><h3 id="if…else-if…-else-语句"><a href="#if…else-if…-else-语句" class="headerlink" title="if…else if….else 语句"></a>if…else if….else 语句</h3><p>if…else if….else 语句在执行多个判断条件的时候很有用。</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><p>语法格式如下所示：</p><blockquote><p>if(boolean_expression 1){ <br><br>    # 在布尔表达式 boolean_expression 1 为 true 执行<br><br>}<br><br>else if( boolean_expression 2){<br><br>    # 在布尔表达式 boolean_expression 2 为 true 执行<br><br>}<br><br>else if(( boolean_expression 3){<br><br>    # 在布尔表达式 boolean_expression 3 为 true 执行<br><br>}<br><br>else{<br><br>    # 布尔表达式的条件都为 false 时执行<br><br>}<br></p></blockquote><p>需要注意以下几点：</p><ul><li><p>一个 if 判断语句可以有 0 或 1 个 else 语句，她必需在 else..if 语句后面。</p></li><li><p>一个 if 判断语句可以有 0 或多个 else..if，这些语句必需在 else 之前。</p></li><li><p>一旦执行了 else..if 内的代码，后面的 else..if 或 else 将不再执行。</p></li></ul><h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num:<span class="built_in">number</span> = <span class="number">2</span> </span><br><span class="line"><span class="keyword">if</span>(num &gt; <span class="number">0</span>) &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(num+<span class="string">" 是正数"</span>) </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(num &lt; <span class="number">0</span>) &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(num+<span class="string">" 是负数"</span>) </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(num+<span class="string">" 不是正数也不是负数"</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num + <span class="string">" 是正数"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num + <span class="string">" 是负数"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num + <span class="string">" 不是正数也不是负数"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><blockquote><p>2 是正数</p></blockquote><h3 id="switch…case-语句"><a href="#switch…case-语句" class="headerlink" title="switch…case 语句"></a>switch…case 语句</h3><p>一个 <code>switch</code> 语句允许测试一个变量等于多个值时的情况。每个值称为一个 <code>case</code>，且被测试的变量会对每个 <code>switch case</code> 进行检查。</p><p><code>switch</code> 语句的语法：</p><p>语法格式如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">switch(expression)&#123;</span><br><span class="line">    case constant-expression  :</span><br><span class="line">       statement(s);</span><br><span class="line">       break; &#x2F;* 可选的 *&#x2F;</span><br><span class="line">    case constant-expression  :</span><br><span class="line">       statement(s);</span><br><span class="line">       break; &#x2F;* 可选的 *&#x2F;</span><br><span class="line">  </span><br><span class="line">    &#x2F;* 您可以有任意数量的 case 语句 *&#x2F;</span><br><span class="line">    default : &#x2F;* 可选的 *&#x2F;</span><br><span class="line">       statement(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch 语句必须遵循下面的规则：</p><ul><li>switch 语句中的 expression 是一个常量表达式，必须是一个整型或枚举类型。</li><li>在一个 switch 中可以有任意数量的 case 语句。每个 case 后跟一个要比较的值和一个冒号。</li><li>case 的 constant-expression 必须与 switch 中的变量具有相同的数据类型，且必须是一个常量或字面量。</li><li>当被测试的变量等于 case 中的常量时，case 后跟的语句将被执行，直到遇到 break 语句为止。</li><li>当遇到 break 语句时，switch 终止，控制流将跳转到 switch 语句后的下一行。</li><li>不是每一个 case 都需要包含 break。如果 case 语句不包含 break，控制流将会 继续 后续的 case，直到遇到 break 为止。</li><li>一个 switch 语句可以有一个可选的 default case，出现在 switch 的结尾。default case 可用于在上面所有 case 都不为真时执行一个任务。default case 中的 break 语句不是必需的。</li></ul><h4 id="流程图-2"><a href="#流程图-2" class="headerlink" title="流程图"></a>流程图</h4><p><img src= "/img/loading.gif" data-src="https://www.runoob.com/wp-content/uploads/2014/09/switch_statement.jpg" alt></p><h4 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> grade:<span class="built_in">string</span> = <span class="string">"A"</span>; </span><br><span class="line"><span class="keyword">switch</span>(grade) &#123; </span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>: &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"优"</span>); </span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>: &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"良"</span>); </span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span>: &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"及格"</span>); </span><br><span class="line">        <span class="keyword">break</span>;    </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">case</span> <span class="string">"D"</span>: &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"不及格"</span>); </span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">default</span>: &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"非法输入"</span>); </span><br><span class="line">        <span class="keyword">break</span>;              </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 tsc 命令编译以上代码得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> grade = <span class="string">"A"</span>;</span><br><span class="line"><span class="keyword">switch</span> (grade) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>: &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"优"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>: &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"良"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span>: &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"及格"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"D"</span>: &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"不及格"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"非法输入"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><blockquote><p>优</p></blockquote>]]></content>
    
    <summary type="html">
    
      TypeScript 是 JavaScript 的一个超集，支持 ECMAScript 6 标准。 TypeScript 设计目标是开发大型应用，它可以编译成纯 JavaScript，编译出来的 JavaScript 可以运行在任何浏览器上。
    
    </summary>
    
    
      <category term="javascript" scheme="https://SmileLJZ.github.io/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://SmileLJZ.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="https://SmileLJZ.github.io/tags/javascript/"/>
    
      <category term="TypeScript" scheme="https://SmileLJZ.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript1</title>
    <link href="https://smileljz.github.io/2020/07/12/TypeScript%EF%BC%881%EF%BC%89/"/>
    <id>https://smileljz.github.io/2020/07/12/TypeScript%EF%BC%881%EF%BC%89/</id>
    <published>2020-07-12T07:58:16.000Z</published>
    <updated>2020-07-14T04:23:49.788Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h1><p>TypeScript 是一种给 JavaScript 添加特性的语言扩展。增加的功能包括：</p><ul><li><p>类型批注和编译时类型检查</p></li><li><p>类型推断</p></li><li><p>类型擦除</p></li><li><p>接口</p></li><li><p>枚举</p></li><li><p>Mixin</p></li><li><p>泛型编程</p></li><li><p>名字空间</p></li><li><p>元组</p></li><li><p>Await<br>以下功能是从 ECMA 2015 反向移植而来：</p></li><li><p>类</p></li><li><p>模块</p></li><li><p>lambda 函数的箭头语法</p></li><li><p>可选参数以及默认参数</p></li></ul><hr><h1 id="TypeScript-安装"><a href="#TypeScript-安装" class="headerlink" title="TypeScript 安装"></a>TypeScript 安装</h1><p>如果你的本地环境已经安装了 npm 工具，可以使用以下命令来安装：</p><blockquote><p>npm install -g typescript</p></blockquote><p>安装完成后我们可以使用 tsc 命令来执行 TypeScript 的相关代码，以下是查看版本号：</p><blockquote><p>$ tsc -v</p><p>Version 3.2.2<br>然后我们新建一个 test.ts 的文件，代码如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a:string = <span class="string">"Hello World"</span> </span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><p>通常我们使用 <code>.ts</code> 作为 TypeScript 代码文件的扩展名。</p><p>然后执行以下命令将 TypeScript 转换为 JavaScript 代码：</p><blockquote><p>tsc test.ts<br>这时候再当前目录下（与 test.ts 同一目录）就会生成一个 test.js 文件，代码如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message);</span><br></pre></td></tr></table></figure><p>使用 node 命令来执行 test.js 文件：</p><blockquote><p>$ node test.js </p><p>Hello World</p></blockquote><hr><h1 id="TypeScript-基础语法"><a href="#TypeScript-基础语法" class="headerlink" title="TypeScript 基础语法"></a>TypeScript 基础语法</h1><p>TypeScript 程序由以下几个部分组成：</p><ul><li>模块</li><li>函数</li><li>变量</li><li>语句和表达式</li><li>注释</li></ul><p>tsc 常用编译参数如下表所示：</p><table><thead><tr><th>编译参数</th><th align="left">说明</th></tr></thead><tbody><tr><td>–help</td><td align="left">显示帮助信息</td></tr><tr><td>–module</td><td align="left">载入扩展模块</td></tr><tr><td>–target</td><td align="left">设置 ECMA 版本</td></tr><tr><td>–declaration</td><td align="left">额外生成一个 .d.ts 扩展名的文件。</td></tr><tr><td>–removeComments</td><td align="left">删除文件的注释</td></tr><tr><td>–out</td><td align="left">编译多个文件并合并到一个输出的文件</td></tr><tr><td>–sourcemap</td><td align="left">生成一个 sourcemap (.map) 文件。<br>sourcemap 是一个存储源代码与编译代码对应位置映射的信息文件。</td></tr><tr><td>–module noImplicitAny</td><td align="left">在表达式和声明上有隐含的 any 类型时报错</td></tr><tr><td>–watch</td><td align="left">在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。</td></tr></tbody></table><h2 id="TypeScript-保留关键字"><a href="#TypeScript-保留关键字" class="headerlink" title="TypeScript 保留关键字"></a>TypeScript 保留关键字</h2><p>TypeScript 保留关键字如下表所示：</p><table><thead><tr><th></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td>break</td><td align="center">as</td><td align="center">catch</td><td align="center">switch</td></tr><tr><td>case</td><td align="center">if</td><td align="center">throw</td><td align="center">else</td></tr><tr><td>var</td><td align="center">number</td><td align="center">string</td><td align="center">get</td></tr><tr><td>module</td><td align="center">type</td><td align="center">instanceof</td><td align="center">typeof</td></tr><tr><td>public</td><td align="center">private</td><td align="center">enum</td><td align="center">export</td></tr><tr><td>finally</td><td align="center">for</td><td align="center">while</td><td align="center">void</td></tr><tr><td>null</td><td align="center">super</td><td align="center">this</td><td align="center">new</td></tr><tr><td>in</td><td align="center">return</td><td align="center">true</td><td align="center">false</td></tr><tr><td>any</td><td align="center">extends</td><td align="center">static</td><td align="center">let</td></tr><tr><td>package</td><td align="center">implements</td><td align="center">interface</td><td align="center">function</td></tr><tr><td>new</td><td align="center">try</td><td align="center">yield</td><td align="center">const</td></tr><tr><td>continue</td><td align="center">do</td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="空白和换行"><a href="#空白和换行" class="headerlink" title="空白和换行"></a>空白和换行</h2><p>TypeScript 会忽略程序中出现的空格、制表符和换行符。</p><p>空格、制表符通常用来缩进代码，使代码易于阅读和理解。</p><h2 id="TypeScript-区分大小写"><a href="#TypeScript-区分大小写" class="headerlink" title="TypeScript 区分大小写"></a>TypeScript 区分大小写</h2><h2 id="分号是可选的"><a href="#分号是可选的" class="headerlink" title="分号是可选的"></a>分号是可选的</h2><p>每行指令都是一段语句，你可以使用分号或不使用， 分号在 TypeScript 中是可选的，建议使用。</p><p>以下代码都是合法的：</p><blockquote><p>console.log(“a”)<br>console.log(“b”);<br>如果语句写在同一行则一定需要使用分号来分隔，否则会报错，如：<br>console.log(“a”);console.log(“b”);</p></blockquote><h2 id="TypeScript-注释"><a href="#TypeScript-注释" class="headerlink" title="TypeScript 注释"></a>TypeScript 注释</h2><p>注释是一个良好的习惯，虽然很多程序员讨厌注释，但还是建议你在每段代码写上文字说明。</p><p>注释可以提高程序的可读性。</p><p>注释可以包含有关程序一些信息，如代码的作者，有关函数的说明等。</p><p>编译器会忽略注释。</p><p><strong>TypeScript 支持两种类型的注释</strong></p><ul><li>单行注释 ( // ) − 在 // 后面的文字都是注释内容。</li><li>多行注释 (/* */) − 这种注释可以跨越多行。</li></ul><p>注释实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个单行注释</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 这是一个多行注释 </span></span><br><span class="line"><span class="comment"> 这是一个多行注释 </span></span><br><span class="line"><span class="comment"> 这是一个多行注释 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="TypeScript-与面向对象"><a href="#TypeScript-与面向对象" class="headerlink" title="TypeScript 与面向对象"></a>TypeScript 与面向对象</h2><p>面向对象是一种对现实世界理解和抽象的方法。</p><p>TypeScript 是一种面向对象的编程语言。</p><p>面向对象主要有两个概念：对象和类。</p><ul><li><strong>对象</strong>：对象是类的一个实例（对象不是找个女朋友），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li><li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li><li><strong>方法</strong>：方法是类的操作的实现步骤。<br>TypeScript 面向对象编程实例：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Site &#123; </span><br><span class="line">   name():<span class="built_in">void</span> &#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Runoob"</span>) </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Site(); </span><br><span class="line">obj.name();</span><br></pre></td></tr></table></figure>以上实例定义了一个类 Site，该类有一个方法 name()，该方法在终端上输出字符串 Runoob。</li></ul><p>new 关键字创建类的对象，该对象调用方法 name()。</p><p>编译后生成的 JavaScript 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Site = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Site</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Site.prototype.name = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Runoob"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Site;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Site();</span><br><span class="line">obj.name();</span><br></pre></td></tr></table></figure><p>执行以上 JavaScript 代码，输出结果如下:</p><blockquote><p>Runoob</p></blockquote><hr><h1 id="TypeScript-基础类型"><a href="#TypeScript-基础类型" class="headerlink" title="TypeScript 基础类型"></a>TypeScript 基础类型</h1><p>TypeScript 包含的数据类型如下表:</p><table><thead><tr><th>数据类型</th><th align="center">关键字</th><th align="left">描述</th></tr></thead><tbody><tr><td>任意类型</td><td align="center">any</td><td align="left">声明为 any 的变量可以赋予任意类型的值。</td></tr><tr><td>数字类型</td><td align="center">number</td><td align="left">双精度 64 位浮点值。它可以用来表示整数和分数。</td></tr><tr><td>字符串类型</td><td align="center">string</td><td align="left">一个字符系列，使用单引号<code>（&#39;）</code>或双引号<code>（&quot;）</code>来表示字符串类型。反引号<code>（`）</code>来定义多行文本和内嵌表达式。</td></tr><tr><td>布尔类型</td><td align="center">boolean</td><td align="left">表示逻辑值：true 和 false。</td></tr><tr><td>数组类型</td><td align="center">无</td><td align="left">声明变量为数组。</td></tr><tr><td>元组</td><td align="center">无</td><td align="left">元组类型用来表示已知元素数量和类型的数组，各元素的类型不必相同，对应位置的类型需要相同。</td></tr><tr><td>枚举</td><td align="center">enum</td><td align="left">枚举类型用于定义数值集合。</td></tr><tr><td>void</td><td align="center">void</td><td align="left">用于标识方法返回值的类型，表示该方法没有返回值。</td></tr><tr><td>null</td><td align="center">null</td><td align="left">表示对象值缺失。</td></tr><tr><td>undefined</td><td align="center">undefined</td><td align="left">用于初始化变量为一个未定义的值</td></tr><tr><td>never</td><td align="center">never</td><td align="left">never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。</td></tr></tbody></table><p><strong>注意：</strong> TypeScript 和 JavaScript 没有整数类型。</p><h2 id="Any-类型"><a href="#Any-类型" class="headerlink" title="Any 类型"></a>Any 类型</h2><p>任意值是 TypeScript 针对编程时类型不明确的变量使用的一种数据类型，它常用于以下三种情况。</p><ol><li>变量的值会动态改变时，比如来自用户的输入，任意值类型可以让这些变量跳过编译阶段的类型检查，示例代码如下：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="built_in">any</span> = <span class="number">1</span>;    <span class="comment">// 数字类型</span></span><br><span class="line">x = <span class="string">'I am who I am'</span>;    <span class="comment">// 字符串类型</span></span><br><span class="line">x = <span class="literal">false</span>;    <span class="comment">// 布尔类型</span></span><br></pre></td></tr></table></figure><ol start="2"><li>改写现有代码时，任意值允许在编译时可选择地包含或移除类型检查，示例代码如下：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">x.ifItExists();    <span class="comment">// 正确，ifItExists方法在运行时可能存在，但这里并不会检查</span></span><br><span class="line">x.toFixed();    <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><ol start="3"><li>定义存储各种类型数据的数组时，示例代码如下：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayList: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="literal">false</span>, <span class="string">'fine'</span>];</span><br><span class="line">arrayList[<span class="number">1</span>] = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h2 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h2><p><strong>null</strong><br>在 JavaScript 中 <code>null</code> 表示 “什么都没有”。</p><p><code>null</code>是一个只有一个值的特殊类型。表示一个空对象引用。</p><p>用 typeof 检测 <code>null</code> 返回是 <code>object</code>。</p><p><strong>undefined</strong><br>在 JavaScript 中, <code>undefined</code> 是一个没有设置值的变量。</p><p>typeof 一个没有值的变量会返回<code>undefined</code>。 </p><p><code>Null</code> 和 <code>Undefined</code> 是其他任何类型（包括 void）的子类型，可以赋值给其它类型，如数字类型，此时，赋值后的类型会变成 <code>null</code> 或 <code>undefined</code>。而在TypeScript中启用严格的空校验（–strictNullChecks）特性，就可以使得<code>null</code> 和 <code>undefined</code>只能被赋值给 <code>void</code> 或本身对应的类型，示例代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启用 --strictNullChecks</span></span><br><span class="line"><span class="keyword">let</span> x: <span class="built_in">number</span>;</span><br><span class="line">x = <span class="number">1</span>; <span class="comment">// 运行正确</span></span><br><span class="line">x = <span class="literal">undefined</span>;    <span class="comment">// 运行错误</span></span><br><span class="line">x = <span class="literal">null</span>;    <span class="comment">// 运行错误</span></span><br></pre></td></tr></table></figure><p>上面的例子中变量 x 只能是数字类型。如果一个类型可能出现 <code>null</code> 或 <code>undefined</code>， 可以用 <code>|</code> 来支持多种类型，示例代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启用 --strictNullChecks</span></span><br><span class="line"><span class="keyword">let</span> x: <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">x = <span class="number">1</span>; <span class="comment">// 运行正确</span></span><br><span class="line">x = <span class="literal">undefined</span>;    <span class="comment">// 运行正确</span></span><br><span class="line">x = <span class="literal">null</span>;    <span class="comment">// 运行正确</span></span><br></pre></td></tr></table></figure><h2 id="never-类型"><a href="#never-类型" class="headerlink" title="never 类型"></a>never 类型</h2><p><code>never</code> 是其它类型（包括 <code>null</code> 和 <code>undefined</code>）的子类型，代表从不会出现的值。这意味着声明为 <code>never</code> 类型的变量只能被 <code>never</code> 类型所赋值，在函数中它通常表现为抛出异常或无法执行到终止点（例如无限循环），示例代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: never;</span><br><span class="line"><span class="keyword">let</span> y: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行错误，数字类型不能转为 never 类型</span></span><br><span class="line">x = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行正确，never 类型可以赋值给 never类型</span></span><br><span class="line">x = <span class="function">(<span class="params">(<span class="params"></span>)=&gt;&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="params">'exception'</span>)&#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 运行正确，<span class="params">never</span> 类型可以赋值给 数字类型</span></span><br><span class="line"><span class="function"><span class="params">y</span> = (<span class="params">(<span class="params"></span>)=&gt;&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="params">'exception'</span>)&#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 返回值为 <span class="params">never</span> 的函数可以是抛出异常的情况</span></span><br><span class="line"><span class="function"><span class="params">function</span> <span class="params">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="params">never</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="params">throw</span> <span class="params">new</span> <span class="params">Error</span>(<span class="params">message</span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 返回值为 <span class="params">never</span> 的函数可以是无法被执行到的终止点的情况</span></span><br><span class="line"><span class="function"><span class="params">function</span> <span class="params">loop</span><span class="params">()</span>: <span class="params">never</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="params">while</span> (<span class="params"><span class="literal">true</span></span>) &#123;&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><hr><h1 id="TypeScript-变量声明"><a href="#TypeScript-变量声明" class="headerlink" title="TypeScript 变量声明"></a>TypeScript 变量声明</h1><p>变量是一种使用方便的占位符，用于引用计算机内存地址。</p><p>我们可以把变量看做存储数据的容器。</p><p>TypeScript 变量的命名规则：</p><ul><li><p>变量名称可以包含数字和字母。</p></li><li><p>除了下划线 _ 和美元 $ 符号外，不能包含其他特殊字符，包括空格。</p></li><li><p>变量名不能以数字开头。</p></li></ul><p>变量使用前必须先声明，我们可以使用 var 来声明变量。</p><p>我们可以使用以下四种方式来声明变量：</p><p>声明变量的类型及初始值：</p><blockquote><p>var [变量名] : [类型] = 值;</p></blockquote><p>例如：</p><blockquote><p>var uname:string = “Runoob”;</p></blockquote><p>声明变量的类型，但没有初始值，变量值会设置为 undefined：</p><blockquote><p>var [变量名] : [类型];</p></blockquote><p>例如：</p><blockquote><p>var uname:string;</p></blockquote><p>声明变量并初始值，但不设置类型，该变量可以是任意类型：</p><blockquote><p>var [变量名] = 值;</p></blockquote><p>例如：</p><blockquote><p>var uname = “Runoob”;</p></blockquote><p>声明变量没有设置类型和初始值，类型可以是任意类型，默认初始值为 undefined：</p><blockquote><p>var [变量名];</p></blockquote><p>例如：</p><blockquote><p>var uname;</p></blockquote><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uname:<span class="built_in">string</span> = <span class="string">"Runoob"</span>;</span><br><span class="line"><span class="keyword">var</span> score1:<span class="built_in">number</span> = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> score2:<span class="built_in">number</span> = <span class="number">42.50</span></span><br><span class="line"><span class="keyword">var</span> sum = score1 + score2</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"名字: "</span>+uname)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"第一个科目成绩: "</span>+score1)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"第二个科目成绩: "</span>+score2)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"总成绩: "</span>+sum)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：变量不要使用 name 否则会与 DOM 中的全局 window 对象下的 name 属性出现了重名。</p><p>使用 tsc 命令编译以上代码，得到如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uname = <span class="string">"Runoob"</span>;</span><br><span class="line"><span class="keyword">var</span> score1 = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> score2 = <span class="number">42.50</span>;</span><br><span class="line"><span class="keyword">var</span> sum = score1 + score2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"名字: "</span> + uname);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"第一个科目成绩: "</span> + score1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"第二个科目成绩: "</span> + score2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"总成绩: "</span> + sum);</span><br></pre></td></tr></table></figure><p>执行该 JavaScript 代码输出结果为：</p><blockquote><p>名字: Runoob <br><br>第一个科目成绩: 50<br><br>第二个科目成绩: 42.5<br><br>总成绩: 92.5</p></blockquote><p>TypeScript 遵循强类型，如果将不同的类型赋值给变量会编译错误，如下实例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num:<span class="built_in">number</span> = <span class="string">"hello"</span>     <span class="comment">// 这个代码会编译错误</span></span><br></pre></td></tr></table></figure><h2 id="类型断言（Type-Assertion）"><a href="#类型断言（Type-Assertion）" class="headerlink" title="类型断言（Type Assertion）"></a>类型断言（Type Assertion）</h2><p>类型断言可以用来手动指定一个值的类型，即允许变量从一种类型更改为另一种类型。</p><p>语法格式：</p><blockquote><p>&lt;类型&gt;值</p></blockquote><p>或:</p><blockquote><p>值 as 类型</p></blockquote><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'1'</span> </span><br><span class="line"><span class="keyword">var</span> str2:<span class="built_in">number</span> = &lt;<span class="built_in">number</span>&gt; &lt;<span class="built_in">any</span>&gt; str   <span class="comment">//str、str2 是 string 类型</span></span><br><span class="line"><span class="built_in">console</span>.log(str2)</span><br></pre></td></tr></table></figure><h3 id="TypeScript-是怎么确定单个断言是否足够"><a href="#TypeScript-是怎么确定单个断言是否足够" class="headerlink" title="TypeScript 是怎么确定单个断言是否足够"></a>TypeScript 是怎么确定单个断言是否足够</h3><p>当 S 类型是 T 类型的子集，或者 T 类型是 S 类型的子集时，S 能被成功断言成 S。这是为了在进行类型断言时提供额外的安全性，完全毫无根据的断言是危险的，如果你想这么做，你可以使用 any。</p><p>它之所以不被称为<strong>类型转换</strong>，是因为转换通常意味着某种运行时的支持。但是，类型断言纯粹是一个编译时语法，同时，它也是一种为编译器提供关于如何分析代码的方法。</p><p>编译后，以上代码会生成如下 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = str;  <span class="comment">//str、str2 是 string 类型</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br></pre></td></tr></table></figure><p>执行输出结果为：</p><blockquote><p>1</p></blockquote><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>当类型没有给出时，TypeScript 编译器利用类型推断来推断类型。</p><p>如果由于缺乏声明而不能推断出类型，那么它的类型被视作默认的动态 <code>any</code> 类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;    <span class="comment">// 类型推断为 number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num 变量的值为 "</span>+num); </span><br><span class="line">num = <span class="string">"12"</span>;    <span class="comment">// 编译错误</span></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><ul><li><p>第一行代码声明了变量 num 并=设置初始值为 2。 注意变量声明没有指定类型。因此，程序使用类型推断来确定变量的数据类型，第一次赋值为 2，num 设置为 number 类型。</p></li><li><p>第三行代码，当我们再次为变量设置字符串类型的值时，这时编译会错误。因为变量已经设置为了 number 类型。</p></li></ul><blockquote><p>error TS2322: Type ‘“12”‘ is not assignable to type ‘number’.</p></blockquote><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>变量作用域指定了变量定义的位置。</p><p>程序中变量的可用性由变量作用域决定。</p><p>TypeScript 有以下几种作用域：</p><ul><li><p><strong>全局作用域</strong> − 全局变量定义在程序结构的外部，它可以在你代码的任何位置使用。</p></li><li><p><strong>类作用域</strong> − 这个变量也可以称为 字段。类变量声明在一个类里头，但在类的方法外面。 该变量可以通过类的对象来访问。类变量也可以是静态的，静态的变量可以通过类名直接访问。</p></li><li><p><strong>局部作用域</strong> − 局部变量，局部变量只能在声明它的一个代码块（如：方法）中使用。</p></li></ul><p>以下实例说明了三种作用域的使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> global_num = <span class="number">12</span>          <span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">class</span> Numbers &#123; </span><br><span class="line">   num_val = <span class="number">13</span>;             <span class="comment">// 实例变量</span></span><br><span class="line">   <span class="keyword">static</span> sval = <span class="number">10</span>;         <span class="comment">// 静态变量</span></span><br><span class="line">   </span><br><span class="line">   storeNum():<span class="built_in">void</span> &#123; </span><br><span class="line">      <span class="keyword">var</span> local_num = <span class="number">14</span>;    <span class="comment">// 局部变量</span></span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"全局变量为: "</span>+global_num)  </span><br><span class="line"><span class="built_in">console</span>.log(Numbers.sval)   <span class="comment">// 静态变量</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Numbers(); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"实例变量: "</span>+obj.num_val)</span><br></pre></td></tr></table></figure><p>以上代码使用 tsc 命令编译为 JavaScript 代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> global_num = <span class="number">12</span>; <span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">var</span> Numbers = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Numbers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num_val = <span class="number">13</span>; <span class="comment">// 实例变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    Numbers.prototype.storeNum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> local_num = <span class="number">14</span>; <span class="comment">// 局部变量</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Numbers.sval = <span class="number">10</span>; <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">return</span> Numbers;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"全局变量为: "</span> + global_num);</span><br><span class="line"><span class="built_in">console</span>.log(Numbers.sval); <span class="comment">// 静态变量</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Numbers();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"实例变量: "</span> + obj.num_val);</span><br></pre></td></tr></table></figure><p>执行以上 JavaScript 代码，输出结果为：</p><blockquote><p>全局变量为: 12 <br><br>10<br><br>实例变量: 13</p></blockquote><p>如果我们在方法外部调用局部变量 local_num，会报错：</p><blockquote><p>error TS2322: Could not find symbol ‘local_num’.</p></blockquote>]]></content>
    
    <summary type="html">
    
      TypeScript 是 JavaScript 的一个超集，支持 ECMAScript 6 标准。 TypeScript 设计目标是开发大型应用，它可以编译成纯 JavaScript，编译出来的 JavaScript 可以运行在任何浏览器上。
    
    </summary>
    
    
      <category term="javascript" scheme="https://SmileLJZ.github.io/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://SmileLJZ.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="https://SmileLJZ.github.io/tags/javascript/"/>
    
      <category term="TypeScript" scheme="https://SmileLJZ.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>ES6手册</title>
    <link href="https://smileljz.github.io/2020/07/07/ES6%E6%89%8B%E5%86%8C/"/>
    <id>https://smileljz.github.io/2020/07/07/ES6%E6%89%8B%E5%86%8C/</id>
    <published>2020-07-07T03:58:01.000Z</published>
    <updated>2020-07-08T03:46:07.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>ES6， 全称 ECMAScript 6.0 ，是 JavaScript 的下一个版本标准，2015.06 发版。为了成为更好编写的开发语言，它适应更复杂的应用；实现代码库之间的共享；不断迭代维护新版本。</p></blockquote><h1 id="es6的大概内容"><a href="#es6的大概内容" class="headerlink" title="es6的大概内容"></a>es6的大概内容</h1><p><img src= "/img/loading.gif" data-src="https://pic.downk.cc/item/5f04960514195aa594accd45.jpg" alt="&#39;ES6的内容&#39;"></p><hr><h1 id="let、const-和-block-作用域"><a href="#let、const-和-block-作用域" class="headerlink" title="let、const 和 block 作用域"></a>let、const 和 block 作用域</h1><blockquote><p>ES2015(ES6) 新增加了两个重要的 JavaScript 关键字: let 和 const。</p></blockquote><ul><li><p>let 声明的变量只在 let 命令所在的代码块内有效。</p></li><li><p>const 声明一个只读的常量，一旦声明，常量的值就不能改变。</p></li></ul><p><code>let</code> 允许创建块级作用域，ES6 推荐在函数中使用 <code>let</code> 定义变量，而非 <code>var</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>同样在块级作用域有效的另一个变量声明方式是 <code>const</code>，它可以声明一个常量。ES6 中，<code>const</code> 声明的常量类似于指针，它指向某个引用，也就是说这个「常量」并非一成不变的，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> ARR = [<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">  ARR.push(<span class="number">7</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(ARR); <span class="comment">// [5,6,7]</span></span><br><span class="line">  ARR = <span class="number">10</span>; <span class="comment">// TypeError</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有几个点需要注意：</p><ul><li><code>let</code> 关键词声明的变量不具备变量提升（hoisting）特性</li><li><code>let</code> 和 <code>const</code> 声明只在最靠近的一个块中（花括号内）有效</li><li>当使用常量 <code>const</code> 声明时，请使用大写变量，如：CAPITAL_CASING</li><li><code>const</code> 在声明时必须被赋值</li></ul><hr><h1 id="箭头函数（Arrow-Functions）"><a href="#箭头函数（Arrow-Functions）" class="headerlink" title="箭头函数（Arrow Functions）"></a>箭头函数（Arrow Functions）</h1><p>ES6 中，箭头函数就是函数的一种简写形式，使用括号包裹参数，跟随一个 <code>=&gt;</code>，紧接着是函数体：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">4.55</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation with Arrow Function</span></span><br><span class="line"><span class="keyword">var</span> getPrice = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">4.55</span>;</span><br></pre></td></tr></table></figure><p>需要注意的是，上面栗子中的 <code>getPrice</code> 箭头函数采用了简洁函数体，它不需要 <code>reture</code> 语句，下面这个栗子使用的是正常函数体：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> breakfast = arr.map(<span class="function"><span class="params">fruit</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fruit + <span class="string">'s'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(breakfast); <span class="comment">// apples bananas oranges</span></span><br></pre></td></tr></table></figure><p>当然，箭头函数不仅仅是让代码变得简洁，函数中 <code>this</code> 总是绑定总是指向对象自身。具体可以看看下面几个栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> <span class="title">growUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在非严格模式下，growUp() 函数的 this 指向 window 对象</span></span><br><span class="line">    <span class="keyword">this</span>.age++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>我们经常需要使用一个变量来保存 <code>this</code>，然后在 growUp 函数中引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">  that.age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> <span class="title">growUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    that.age++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而使用箭头函数可以省却这个麻烦：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// |this| 指向 person 对象</span></span><br><span class="line">    <span class="keyword">this</span>.age++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><hr><h1 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h1><p>ES6 中允许你对函数参数设置默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getFinalPrice = <span class="function">(<span class="params">price, tax=<span class="number">0.7</span></span>) =&gt;</span> &#123;</span><br><span class="line">    price + price * tax;</span><br><span class="line">&#125;</span><br><span class="line">getFinalPrice(<span class="number">500</span>); <span class="comment">// 850</span></span><br></pre></td></tr></table></figure><hr><h1 id="Spread-Rest-操作符"><a href="#Spread-Rest-操作符" class="headerlink" title="Spread / Rest 操作符"></a>Spread / Rest 操作符</h1><p>Spread / Rest 操作符指的是 <code>...</code>，具体是 Spread 还是 Rest 需要看上下文语境。</p><p>当被用于迭代器中时，它是一个 Spread 操作符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x,y,z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">foo(...arr); <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><p>当被用于函数传参时，是一个 Rest 操作符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">foo( <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><hr><h1 id="对象词法扩展"><a href="#对象词法扩展" class="headerlink" title="对象词法扩展"></a>对象词法扩展</h1><p>ES6 允许声明在对象字面量时使用简写语法，来初始化属性变量和函数的定义方法，并且允许在对象属性中进行计算操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCar</span>(<span class="params">make, model, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 简写变量</span></span><br><span class="line">    make,  <span class="comment">// 等同于 make: make</span></span><br><span class="line">    model, <span class="comment">// 等同于 model: model</span></span><br><span class="line">    value, <span class="comment">// 等同于 value: value</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性可以使用表达式计算值</span></span><br><span class="line">    [<span class="string">'make'</span> + make]: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 忽略 `function` 关键词简写对象函数</span></span><br><span class="line">    depreciate() &#123;</span><br><span class="line">      <span class="keyword">this</span>.value -= <span class="number">2500</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car = getCar(<span class="string">'Barret'</span>, <span class="string">'Lee'</span>, <span class="number">40000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: &#123;</span></span><br><span class="line"><span class="comment">//     make: 'Barret',</span></span><br><span class="line"><span class="comment">//     model:'Lee',</span></span><br><span class="line"><span class="comment">//     value: 40000,</span></span><br><span class="line"><span class="comment">//     makeBarret: true,</span></span><br><span class="line"><span class="comment">//     depreciate: function()</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><hr><h1 id="二进制和八进制字面量"><a href="#二进制和八进制字面量" class="headerlink" title="二进制和八进制字面量"></a>二进制和八进制字面量</h1><p>ES6 支持二进制和八进制的字面量，通过在数字前面添加 <code>0o</code> 或者 <code>0O</code> 即可将其转换为二进制值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oValue = <span class="number">0o10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(oValue); <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bValue = <span class="number">0b10</span>; <span class="comment">// 二进制使用 `0b` 或者 `0B`</span></span><br><span class="line"><span class="built_in">console</span>.log(bValue); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h1 id="对象和数组解构"><a href="#对象和数组解构" class="headerlink" title="对象和数组解构"></a>对象和数组解构</h1><p>解构可以避免在对象赋值时产生中间变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = foo(); <span class="comment">// [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = foo();</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c); <span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    x: <span class="number">4</span>,</span><br><span class="line">    y: <span class="number">5</span>,</span><br><span class="line">    z: <span class="number">6</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">x</span>: x, <span class="attr">y</span>: y, <span class="attr">z</span>: z&#125; = bar();</span><br><span class="line"><span class="built_in">console</span>.log(x, y, z); <span class="comment">// 4 5 6</span></span><br></pre></td></tr></table></figure><hr><h1 id="对象超类"><a href="#对象超类" class="headerlink" title="对象超类"></a>对象超类</h1><p>ES6 允许在对象中使用 <code>super</code> 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello from the Parent"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = &#123;</span><br><span class="line">  foo() &#123;<span class="comment">//重写父类方法</span></span><br><span class="line">    <span class="keyword">super</span>.foo();<span class="comment">//保留父类的方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello from the Child"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(child, parent);</span><br><span class="line">child.foo(); <span class="comment">// Hello from the Parent</span></span><br><span class="line">             <span class="comment">// Hello from the Child</span></span><br></pre></td></tr></table></figure><hr><h1 id="模板语法和分隔符"><a href="#模板语法和分隔符" class="headerlink" title="模板语法和分隔符"></a>模板语法和分隔符</h1><p>ES6 中有一种十分简洁的方法组装一堆字符串和变量。</p><ul><li><code>${ ... }</code> 用来渲染一个变量</li><li>`` `作为分隔符<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="string">'Barret'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hi <span class="subst">$&#123;user&#125;</span>!`</span>); <span class="comment">// Hi Barret!</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="for-of-VS-for-in"><a href="#for-of-VS-for-in" class="headerlink" title="for...of VS for...in"></a><code>for...of</code> VS <code>for...in</code></h1><p><code>for...of</code> 用于遍历一个迭代器，如数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nicknames = [<span class="string">'di'</span>, <span class="string">'boo'</span>, <span class="string">'punkeye'</span>];</span><br><span class="line">nicknames.size = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> nickname <span class="keyword">of</span> nicknames) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(nickname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Result: di, boo, punkeye</span></span><br></pre></td></tr></table></figure><p><code>for...in</code> 用来遍历对象中的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nicknames = [<span class="string">'di'</span>, <span class="string">'boo'</span>, <span class="string">'punkeye'</span>];</span><br><span class="line">nicknames.size = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> nickname <span class="keyword">in</span> nicknames) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(nickname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Result: 0, 1, 2, size</span></span><br></pre></td></tr></table></figure><hr><h1 id="Map-和-WeakMap"><a href="#Map-和-WeakMap" class="headerlink" title="Map 和 WeakMap"></a>Map 和 WeakMap</h1><p>ES6 中两种新的数据结构集：<code>Map</code> 和 <code>WeakMap</code>。事实上每个对象都可以看作是一个 <code>Map</code>。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>一个对象由多个 key-val 对构成，在 <code>Map</code> 中，任何类型都可以作为对象的 key，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> keyString = <span class="string">"a string"</span>,</span><br><span class="line">    keyObj = &#123;&#125;,</span><br><span class="line">    keyFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置值</span></span><br><span class="line">myMap.set(keyString, <span class="string">"value 与 'a string' 关联"</span>);</span><br><span class="line">myMap.set(keyObj, <span class="string">"value 与 keyObj 关联"</span>);</span><br><span class="line">myMap.set(keyFunc, <span class="string">"value 与 keyFunc 关联"</span>);</span><br><span class="line"></span><br><span class="line">myMap.size; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line">myMap.get(keyString);    <span class="comment">// "value 与 'a string' 关联"</span></span><br><span class="line">myMap.get(keyObj);       <span class="comment">// "value 与 keyObj 关联"</span></span><br><span class="line">myMap.get(keyFunc);      <span class="comment">// "value 与 keyFunc 关联"</span></span><br></pre></td></tr></table></figure><h2 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h2><p><code>WeakMap</code> 就是一个 Map，只不过它的所有 key 都是弱引用，意思就是 WeakMap 中的东西垃圾回收时不考虑，使用它不用担心内存泄漏问题。</p><p>另一个需要注意的点是，<code>WeakMap</code> 的所有 key 必须是对象。它只有四个方法 <code>delete(key),has(key),get(key)</code> 和 <code>set(key, val)</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">w.set(<span class="string">'a'</span>, <span class="string">'b'</span>); </span><br><span class="line"><span class="comment">// Uncaught TypeError: Invalid value used as weak map key</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = &#123;&#125;,</span><br><span class="line">    o2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    o3 = <span class="built_in">window</span>;</span><br><span class="line"></span><br><span class="line">w.set(o1, <span class="number">37</span>);</span><br><span class="line">w.set(o2, <span class="string">"azerty"</span>);</span><br><span class="line">w.set(o3, <span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line">w.get(o3); <span class="comment">// undefined, because that is the set value</span></span><br><span class="line"></span><br><span class="line">w.has(o1); <span class="comment">// true</span></span><br><span class="line">w.delete(o1);</span><br><span class="line">w.has(o1); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h1 id="Set-和-WeakSet"><a href="#Set-和-WeakSet" class="headerlink" title="Set 和 WeakSet"></a>Set 和 WeakSet</h1><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p><code>Set</code>对象是一组不重复的值，重复的值将被忽略，值类型可以是原始类型和引用类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]);</span><br><span class="line">mySet.size; <span class="comment">// 3</span></span><br><span class="line">mySet.has(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">mySet.add(<span class="string">'strings'</span>);</span><br><span class="line">mySet.add(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span> &#125;);</span><br></pre></td></tr></table></figure><p>可以通过 <code>forEach</code> 和 <code>for...of</code> 来遍历 <code>Set</code> 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mySet.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="comment">// 'strings'</span></span><br><span class="line">    <span class="comment">// Object &#123; a: 1, b: 2 &#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> mySet) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="comment">// 'strings'</span></span><br><span class="line">    <span class="comment">// Object &#123; a: 1, b: 2 &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Set 同样有 <code>delete()</code> 和 <code>clear()</code> 方法。</p><h2 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h2><p>类似于 <code>WeakMap</code>，<code>WeakSet</code> 对象可以让你在一个集合中保存对象的弱引用，在 <code>WeakSet</code> 中的对象只允许出现一次：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">ws.add(<span class="built_in">window</span>);</span><br><span class="line">ws.add(obj);</span><br><span class="line"></span><br><span class="line">ws.has(<span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line">ws.has(foo);    <span class="comment">// false, foo 没有添加成功</span></span><br><span class="line"></span><br><span class="line">ws.delete(<span class="built_in">window</span>); <span class="comment">// 从结合中删除 window 对象</span></span><br><span class="line">ws.has(<span class="built_in">window</span>);    <span class="comment">// false, window 对象已经被删除</span></span><br></pre></td></tr></table></figure><hr><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>ES6 中有 class 语法。值得注意是，这里的 class 不是新的对象继承模型，它只是原型链的语法糖表现形式。</p><p>函数中使用 <code>static</code> 关键词定义构造函数的的方法和属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"task instantiated!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  showId() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">23</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> loadAll() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Loading all tasks.."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Task); <span class="comment">// function</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="keyword">new</span> Task(); <span class="comment">// "task instantiated!"</span></span><br><span class="line">task.showId(); <span class="comment">// 23</span></span><br><span class="line">Task.loadAll(); <span class="comment">// "Loading all tasks.."</span></span><br></pre></td></tr></table></figure><p>类中的继承和超集：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Creating a new car"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Porsche</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Creating Porsche"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Porsche();</span><br><span class="line"><span class="comment">// Creating a new car</span></span><br><span class="line"><span class="comment">// Creating Porsche</span></span><br></pre></td></tr></table></figure><p><code>extends</code> 允许一个子类继承父类，需要注意的是，子类的 <code>constructor</code> 函数中需要执行 <code>super()</code> 函数。</p><p>当然，你也可以在子类方法中调用父类的方法，如 <code>super.parentMethodName()</code>。</p><p>有几点值得注意的是：</p><ul><li>类的声明不会提升（hoisting)，如果你要使用某个 Class，那你必须在使用之前定义它，否则会抛出一个 <code>ReferenceError</code> 的错误</li><li>在类中定义函数不需要使用 <code>function</code> 关键词</li></ul><hr><h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p><code>Symbol</code> 是一种新的数据类型，它的值是唯一的，不可变的。ES6 中提出 <code>symbol</code> 的目的是为了生成一个唯一的标识符，不过你访问不到这个标识符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sym = <span class="built_in">Symbol</span>( <span class="string">"some optional description"</span> );</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> sym); <span class="comment">// symbol</span></span><br></pre></td></tr></table></figure><p>注意，这里 <strong>Symbol</strong> 前面不能使用 <code>new</code> 操作符。</p><p>如果它被用作一个对象的属性，那么这个属性会是不可枚举的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    val: <span class="number">10</span>,</span><br><span class="line">    [ <span class="built_in">Symbol</span>(<span class="string">"random"</span>) ]: <span class="string">"I'm a symbol"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(o)); <span class="comment">// val</span></span><br></pre></td></tr></table></figure><h2 id="如果要获取对象-symbol-属性，需要使用-Object-getOwnPropertySymbols-o-。"><a href="#如果要获取对象-symbol-属性，需要使用-Object-getOwnPropertySymbols-o-。" class="headerlink" title="如果要获取对象 symbol 属性，需要使用 Object.getOwnPropertySymbols(o)。"></a>如果要获取对象 symbol 属性，需要使用 <code>Object.getOwnPropertySymbols(o)</code>。</h2><h1 id="迭代器（Iterators）"><a href="#迭代器（Iterators）" class="headerlink" title="迭代器（Iterators）"></a>迭代器（Iterators）</h1><p>迭代器允许每次访问数据集合的一个元素，当指针指向数据集合最后一个元素是，迭代器便会退出。它提供了 <code>next()</code> 函数来遍历一个序列，这个方法返回一个包含 <code>done</code> 和 <code>value</code> 属性的对象。</p><p>ES6 中可以通过 <code>Symbol.iterator</code> 给对象设置默认的遍历器，无论什么时候对象需要被遍历，执行它的 <code>@@iterator</code> 方法便可以返回一个用于获取值的迭代器。</p><p>数组默认就是一个迭代器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>];</span><br><span class="line"><span class="keyword">var</span> itr = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line">itr.next(); <span class="comment">// &#123; value: 11, done: false &#125;</span></span><br><span class="line">itr.next(); <span class="comment">// &#123; value: 12, done: false &#125;</span></span><br><span class="line">itr.next(); <span class="comment">// &#123; value: 13, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">itr.next(); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><h2 id="你可以通过-Symbol-iterator-自定义一个对象的迭代器。"><a href="#你可以通过-Symbol-iterator-自定义一个对象的迭代器。" class="headerlink" title="你可以通过 [Symbol.iterator]() 自定义一个对象的迭代器。"></a>你可以通过 <code>[Symbol.iterator]()</code> 自定义一个对象的迭代器。</h2><h1 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h1><p>Generator 函数是 ES6 的新特性，它允许一个函数返回的可遍历对象生成多个值。</p><p>在使用中你会看到 <code>*</code> 语法和一个新的关键词 <code>yield</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">infiniteNumbers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">yield</span> n++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = infiniteNumbers(); <span class="comment">// returns an iterable object</span></span><br><span class="line"></span><br><span class="line">numbers.next(); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">numbers.next(); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">numbers.next(); <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br></pre></td></tr></table></figure><p>每次执行 yield 时，返回的值变为迭代器的下一个值。</p><hr><h1 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h1><p>ES6 对 Promise 有了原生的支持，一个 Promise 是一个等待被异步执行的对象，当它执行完成后，其状态会变成 <code>resolved</code> 或者 <code>rejected</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* condition */</span>) &#123;</span><br><span class="line">    <span class="comment">// fulfilled successfully</span></span><br><span class="line">    resolve(<span class="comment">/* value */</span>);  </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// error, rejected</span></span><br><span class="line">    reject(<span class="comment">/* reason */</span>);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>每一个 Promise 都有一个 .then 方法，这个方法接受两个参数，第一个是处理 resolved 状态的回调，一个是处理 rejected 状态的回调：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Promise Resolved"</span>, val),</span><br><span class="line">       (err) =&gt; <span class="built_in">console</span>.log(<span class="string">"Promise Rejected"</span>, err));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      关于es6的一些语法和常用操作
    
    </summary>
    
    
      <category term="javascript" scheme="https://SmileLJZ.github.io/categories/javascript/"/>
    
    
      <category term="es6" scheme="https://SmileLJZ.github.io/tags/es6/"/>
    
      <category term="前端" scheme="https://SmileLJZ.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World ！smile</title>
    <link href="https://smileljz.github.io/2020/07/07/hello-world/"/>
    <id>https://smileljz.github.io/2020/07/07/hello-world/</id>
    <published>2020-07-06T18:43:27.956Z</published>
    <updated>2020-07-06T18:50:02.453Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
